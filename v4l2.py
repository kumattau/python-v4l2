# -*- coding: utf-8 -*-
#
# Copyright (c) 2021 kumattau
#
# Use of this source code is governed by a MIT License
#

"""
A python ctypes binding for video4linux2
"""

import ctypes

#
# linux-libc-dev:amd64 5.4.0-81.91
#
# <asm-generic/ioctl.h>
# <linux/time.h>
# <linux/v4l2-common.h>
# <linux/v4l2-controls.h
# <linux/videodev2.h>
#


#
# <asm-generic/ioctl.h>
#

# @formatter:off
_IOC_NRBITS                             = 8
_IOC_TYPEBITS                           = 8
_IOC_SIZEBITS                           = 14
_IOC_DIRBITS                            = 2

_IOC_NRMASK                             = (1 << _IOC_NRBITS) - 1
_IOC_TYPEMASK                           = (1 << _IOC_TYPEBITS) - 1
_IOC_SIZEMASK                           = (1 << _IOC_SIZEBITS) - 1
_IOC_DIRMASK                            = (1 << _IOC_DIRBITS) - 1

_IOC_NRSHIFT                            = 0
_IOC_TYPESHIFT                          = _IOC_NRSHIFT + _IOC_NRBITS
_IOC_SIZESHIFT                          = _IOC_TYPESHIFT + _IOC_TYPEBITS
_IOC_DIRSHIFT                           = _IOC_SIZESHIFT + _IOC_SIZEBITS

_IOC_NONE                               = 0
_IOC_WRITE                              = 1
_IOC_READ                               = 2
# @formatter:on


def _IOC(dir, type, nr, size):
    return \
        dir << _IOC_DIRSHIFT | \
        ord(type) << _IOC_TYPESHIFT | \
        nr << _IOC_NRSHIFT | \
        size << _IOC_SIZESHIFT


def _IOC_TYPECHECK(t):
    return ctypes.sizeof(t)


def _IO(type, nr):
    return _IOC(_IOC_NONE, type, nr, 0)


def _IOR(type, nr, size):
    return _IOC(_IOC_READ, type, nr, _IOC_TYPECHECK(size))


def _IOW(type, nr, size):
    return _IOC(_IOC_WRITE, type, nr, _IOC_TYPECHECK(size))


def _IOWR(type, nr, size):
    return _IOC(_IOC_READ | _IOC_WRITE, type, nr, _IOC_TYPECHECK(size))


#
# <linux/time.h>
#


class timeval(ctypes.Structure):
    _fields_ = [
        ("tv_sec", ctypes.c_long),
        ("tv_usec", ctypes.c_long),
    ]


class timespec(ctypes.Structure):
    _fields_ = [
        ("tv_sec", ctypes.c_long),
        ("tv_usec", ctypes.c_long),
    ]


#
# <linux/v4l2-common.h>
#

# @formatter:off
V4L2_SEL_TGT_CROP                       = 0x0000
V4L2_SEL_TGT_CROP_DEFAULT               = 0x0001
V4L2_SEL_TGT_CROP_BOUNDS                = 0x0002
V4L2_SEL_TGT_NATIVE_SIZE                = 0x0003
V4L2_SEL_TGT_COMPOSE                    = 0x0100
V4L2_SEL_TGT_COMPOSE_DEFAULT            = 0x0101
V4L2_SEL_TGT_COMPOSE_BOUNDS             = 0x0102
V4L2_SEL_TGT_COMPOSE_PADDED             = 0x0103

V4L2_SEL_FLAG_GE                        = 1 << 0
V4L2_SEL_FLAG_LE                        = 1 << 1
V4L2_SEL_FLAG_KEEP_CONFIG               = 1 << 2
# @formatter:on


class v4l2_edid(ctypes.Structure):
    _fields_ = [
        ("pad", ctypes.c_uint32),
        ("start_block", ctypes.c_uint32),
        ("blocks", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 5),
        ("edid", ctypes.POINTER(ctypes.c_uint8)),
    ]


# @formatter:off
V4L2_SEL_TGT_CROP_ACTIVE                = V4L2_SEL_TGT_CROP
V4L2_SEL_TGT_COMPOSE_ACTIVE             = V4L2_SEL_TGT_COMPOSE
V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL         = V4L2_SEL_TGT_CROP
V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL      = V4L2_SEL_TGT_COMPOSE
V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS         = V4L2_SEL_TGT_CROP_BOUNDS
V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS      = V4L2_SEL_TGT_COMPOSE_BOUNDS

V4L2_SUBDEV_SEL_FLAG_SIZE_GE            = V4L2_SEL_FLAG_GE
V4L2_SUBDEV_SEL_FLAG_SIZE_LE            = V4L2_SEL_FLAG_LE
V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG        = V4L2_SEL_FLAG_KEEP_CONFIG
# @formatter:on


#
# <linux/v4l2-controls.h
#

# @formatter:off
V4L2_CTRL_CLASS_USER                    = 0x00980000
V4L2_CTRL_CLASS_MPEG                    = 0x00990000
V4L2_CTRL_CLASS_CAMERA                  = 0x009a0000
V4L2_CTRL_CLASS_FM_TX                   = 0x009b0000
V4L2_CTRL_CLASS_FLASH                   = 0x009c0000
V4L2_CTRL_CLASS_JPEG                    = 0x009d0000
V4L2_CTRL_CLASS_IMAGE_SOURCE            = 0x009e0000
V4L2_CTRL_CLASS_IMAGE_PROC              = 0x009f0000
V4L2_CTRL_CLASS_DV                      = 0x00a00000
V4L2_CTRL_CLASS_FM_RX                   = 0x00a10000
V4L2_CTRL_CLASS_RF_TUNER                = 0x00a20000
V4L2_CTRL_CLASS_DETECT                  = 0x00a30000

V4L2_CID_BASE                           = V4L2_CTRL_CLASS_USER | 0x900
V4L2_CID_USER_BASE                      = V4L2_CID_BASE
V4L2_CID_USER_CLASS                     = V4L2_CTRL_CLASS_USER | 1
V4L2_CID_BRIGHTNESS                     = V4L2_CID_BASE + 0
V4L2_CID_CONTRAST                       = V4L2_CID_BASE + 1
V4L2_CID_SATURATION                     = V4L2_CID_BASE + 2
V4L2_CID_HUE                            = V4L2_CID_BASE + 3
V4L2_CID_AUDIO_VOLUME                   = V4L2_CID_BASE + 5
V4L2_CID_AUDIO_BALANCE                  = V4L2_CID_BASE + 6
V4L2_CID_AUDIO_BASS                     = V4L2_CID_BASE + 7
V4L2_CID_AUDIO_TREBLE                   = V4L2_CID_BASE + 8
V4L2_CID_AUDIO_MUTE                     = V4L2_CID_BASE + 9
V4L2_CID_AUDIO_LOUDNESS                 = V4L2_CID_BASE + 10
V4L2_CID_BLACK_LEVEL                    = V4L2_CID_BASE + 11
V4L2_CID_AUTO_WHITE_BALANCE             = V4L2_CID_BASE + 12
V4L2_CID_DO_WHITE_BALANCE               = V4L2_CID_BASE + 13
V4L2_CID_RED_BALANCE                    = V4L2_CID_BASE + 14
V4L2_CID_BLUE_BALANCE                   = V4L2_CID_BASE + 15
V4L2_CID_GAMMA                          = V4L2_CID_BASE + 16
V4L2_CID_WHITENESS                      = V4L2_CID_GAMMA
V4L2_CID_EXPOSURE                       = V4L2_CID_BASE + 17
V4L2_CID_AUTOGAIN                       = V4L2_CID_BASE + 18
V4L2_CID_GAIN                           = V4L2_CID_BASE + 19
V4L2_CID_HFLIP                          = V4L2_CID_BASE + 20
V4L2_CID_VFLIP                          = V4L2_CID_BASE + 21

V4L2_CID_POWER_LINE_FREQUENCY           = V4L2_CID_BASE + 24

V4L2_CID_POWER_LINE_FREQUENCY_DISABLED  = 0
V4L2_CID_POWER_LINE_FREQUENCY_50HZ      = 1
V4L2_CID_POWER_LINE_FREQUENCY_60HZ      = 2
V4L2_CID_POWER_LINE_FREQUENCY_AUTO      = 3

V4L2_CID_HUE_AUTO                       = V4L2_CID_BASE + 25
V4L2_CID_WHITE_BALANCE_TEMPERATURE      = V4L2_CID_BASE + 26
V4L2_CID_SHARPNESS                      = V4L2_CID_BASE + 27
V4L2_CID_BACKLIGHT_COMPENSATION         = V4L2_CID_BASE + 28
V4L2_CID_CHROMA_AGC                     = V4L2_CID_BASE + 29
V4L2_CID_COLOR_KILLER                   = V4L2_CID_BASE + 30
V4L2_CID_COLORFX                        = V4L2_CID_BASE + 31

V4L2_COLORFX_NONE                       = 0
V4L2_COLORFX_BW                         = 1
V4L2_COLORFX_SEPIA                      = 2
V4L2_COLORFX_NEGATIVE                   = 3
V4L2_COLORFX_EMBOSS                     = 4
V4L2_COLORFX_SKETCH                     = 5
V4L2_COLORFX_SKY_BLUE                   = 6
V4L2_COLORFX_GRASS_GREEN                = 7
V4L2_COLORFX_SKIN_WHITEN                = 8
V4L2_COLORFX_VIVID                      = 9
V4L2_COLORFX_AQUA                       = 10
V4L2_COLORFX_ART_FREEZE                 = 11
V4L2_COLORFX_SILHOUETTE                 = 12
V4L2_COLORFX_SOLARIZATION               = 13
V4L2_COLORFX_ANTIQUE                    = 14
V4L2_COLORFX_SET_CBCR                   = 15

V4L2_CID_AUTOBRIGHTNESS                 = V4L2_CID_BASE + 32
V4L2_CID_BAND_STOP_FILTER               = V4L2_CID_BASE + 33

V4L2_CID_ROTATE                         = V4L2_CID_BASE + 34
V4L2_CID_BG_COLOR                       = V4L2_CID_BASE + 35

V4L2_CID_CHROMA_GAIN                    = V4L2_CID_BASE + 36

V4L2_CID_ILLUMINATORS_1                 = V4L2_CID_BASE + 37
V4L2_CID_ILLUMINATORS_2                 = V4L2_CID_BASE + 38

V4L2_CID_MIN_BUFFERS_FOR_CAPTURE        = V4L2_CID_BASE + 39
V4L2_CID_MIN_BUFFERS_FOR_OUTPUT         = V4L2_CID_BASE + 40

V4L2_CID_ALPHA_COMPONENT                = V4L2_CID_BASE + 41
V4L2_CID_COLORFX_CBCR                   = V4L2_CID_BASE + 42

V4L2_CID_LASTP1                         = V4L2_CID_BASE + 43

V4L2_CID_USER_MEYE_BASE                 = V4L2_CID_USER_BASE + 0x1000
V4L2_CID_USER_BTTV_BASE                 = V4L2_CID_USER_BASE + 0x1010
V4L2_CID_USER_S2255_BASE                = V4L2_CID_USER_BASE + 0x1030
V4L2_CID_USER_SI476X_BASE               = V4L2_CID_USER_BASE + 0x1040
V4L2_CID_USER_TI_VPE_BASE               = V4L2_CID_USER_BASE + 0x1050
V4L2_CID_USER_SAA7134_BASE              = V4L2_CID_USER_BASE + 0x1060
V4L2_CID_USER_ADV7180_BASE              = V4L2_CID_USER_BASE + 0x1070
V4L2_CID_USER_TC358743_BASE             = V4L2_CID_USER_BASE + 0x1080
V4L2_CID_USER_MAX217X_BASE              = V4L2_CID_USER_BASE + 0x1090
V4L2_CID_USER_IMX_BASE                  = V4L2_CID_USER_BASE + 0x10b0

V4L2_CID_MPEG_BASE                      = V4L2_CTRL_CLASS_MPEG | 0x900
V4L2_CID_MPEG_CLASS                     = V4L2_CTRL_CLASS_MPEG | 1

V4L2_CID_MPEG_STREAM_TYPE               = V4L2_CID_MPEG_BASE + 0

V4L2_MPEG_STREAM_TYPE_MPEG2_PS          = 0
V4L2_MPEG_STREAM_TYPE_MPEG2_TS          = 1
V4L2_MPEG_STREAM_TYPE_MPEG1_SS          = 2
V4L2_MPEG_STREAM_TYPE_MPEG2_DVD         = 3
V4L2_MPEG_STREAM_TYPE_MPEG1_VCD         = 4
V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD        = 5

V4L2_CID_MPEG_STREAM_PID_PMT            = V4L2_CID_MPEG_BASE + 1
V4L2_CID_MPEG_STREAM_PID_AUDIO          = V4L2_CID_MPEG_BASE + 2
V4L2_CID_MPEG_STREAM_PID_VIDEO          = V4L2_CID_MPEG_BASE + 3
V4L2_CID_MPEG_STREAM_PID_PCR            = V4L2_CID_MPEG_BASE + 4
V4L2_CID_MPEG_STREAM_PES_ID_AUDIO       = V4L2_CID_MPEG_BASE + 5
V4L2_CID_MPEG_STREAM_PES_ID_VIDEO       = V4L2_CID_MPEG_BASE + 6
V4L2_CID_MPEG_STREAM_VBI_FMT            = V4L2_CID_MPEG_BASE + 7

V4L2_MPEG_STREAM_VBI_FMT_NONE           = 0
V4L2_MPEG_STREAM_VBI_FMT_IVTV           = 1

V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ       = V4L2_CID_MPEG_BASE + 100

V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100     = 0
V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000     = 1
V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000     = 2

V4L2_CID_MPEG_AUDIO_ENCODING            = V4L2_CID_MPEG_BASE + 101

V4L2_MPEG_AUDIO_ENCODING_LAYER_1        = 0
V4L2_MPEG_AUDIO_ENCODING_LAYER_2        = 1
V4L2_MPEG_AUDIO_ENCODING_LAYER_3        = 2
V4L2_MPEG_AUDIO_ENCODING_AAC            = 3
V4L2_MPEG_AUDIO_ENCODING_AC3            = 4

V4L2_CID_MPEG_AUDIO_L1_BITRATE          = V4L2_CID_MPEG_BASE + 102

V4L2_MPEG_AUDIO_L1_BITRATE_32K          = 0
V4L2_MPEG_AUDIO_L1_BITRATE_64K          = 1
V4L2_MPEG_AUDIO_L1_BITRATE_96K          = 2
V4L2_MPEG_AUDIO_L1_BITRATE_128K         = 3
V4L2_MPEG_AUDIO_L1_BITRATE_160K         = 4
V4L2_MPEG_AUDIO_L1_BITRATE_192K         = 5
V4L2_MPEG_AUDIO_L1_BITRATE_224K         = 6
V4L2_MPEG_AUDIO_L1_BITRATE_256K         = 7
V4L2_MPEG_AUDIO_L1_BITRATE_288K         = 8
V4L2_MPEG_AUDIO_L1_BITRATE_320K         = 9
V4L2_MPEG_AUDIO_L1_BITRATE_352K         = 10
V4L2_MPEG_AUDIO_L1_BITRATE_384K         = 11
V4L2_MPEG_AUDIO_L1_BITRATE_416K         = 12
V4L2_MPEG_AUDIO_L1_BITRATE_448K         = 13

V4L2_CID_MPEG_AUDIO_L2_BITRATE          = V4L2_CID_MPEG_BASE + 103

V4L2_MPEG_AUDIO_L2_BITRATE_32K          = 0
V4L2_MPEG_AUDIO_L2_BITRATE_48K          = 1
V4L2_MPEG_AUDIO_L2_BITRATE_56K          = 2
V4L2_MPEG_AUDIO_L2_BITRATE_64K          = 3
V4L2_MPEG_AUDIO_L2_BITRATE_80K          = 4
V4L2_MPEG_AUDIO_L2_BITRATE_96K          = 5
V4L2_MPEG_AUDIO_L2_BITRATE_112K         = 6
V4L2_MPEG_AUDIO_L2_BITRATE_128K         = 7
V4L2_MPEG_AUDIO_L2_BITRATE_160K         = 8
V4L2_MPEG_AUDIO_L2_BITRATE_192K         = 9
V4L2_MPEG_AUDIO_L2_BITRATE_224K         = 10
V4L2_MPEG_AUDIO_L2_BITRATE_256K         = 11
V4L2_MPEG_AUDIO_L2_BITRATE_320K         = 12
V4L2_MPEG_AUDIO_L2_BITRATE_384K         = 13

V4L2_CID_MPEG_AUDIO_L3_BITRATE          = V4L2_CID_MPEG_BASE + 104

V4L2_MPEG_AUDIO_L3_BITRATE_32K          = 0
V4L2_MPEG_AUDIO_L3_BITRATE_40K          = 1
V4L2_MPEG_AUDIO_L3_BITRATE_48K          = 2
V4L2_MPEG_AUDIO_L3_BITRATE_56K          = 3
V4L2_MPEG_AUDIO_L3_BITRATE_64K          = 4
V4L2_MPEG_AUDIO_L3_BITRATE_80K          = 5
V4L2_MPEG_AUDIO_L3_BITRATE_96K          = 6
V4L2_MPEG_AUDIO_L3_BITRATE_112K         = 7
V4L2_MPEG_AUDIO_L3_BITRATE_128K         = 8
V4L2_MPEG_AUDIO_L3_BITRATE_160K         = 9
V4L2_MPEG_AUDIO_L3_BITRATE_192K         = 10
V4L2_MPEG_AUDIO_L3_BITRATE_224K         = 11
V4L2_MPEG_AUDIO_L3_BITRATE_256K         = 12
V4L2_MPEG_AUDIO_L3_BITRATE_320K         = 13

V4L2_CID_MPEG_AUDIO_MODE                = V4L2_CID_MPEG_BASE + 105

V4L2_MPEG_AUDIO_MODE_STEREO             = 0
V4L2_MPEG_AUDIO_MODE_JOINT_STEREO       = 1
V4L2_MPEG_AUDIO_MODE_DUAL               = 2
V4L2_MPEG_AUDIO_MODE_MONO               = 3

V4L2_CID_MPEG_AUDIO_MODE_EXTENSION      = V4L2_CID_MPEG_BASE + 106

V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4  = 0
V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8  = 1
V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 = 2
V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 = 3

V4L2_CID_MPEG_AUDIO_EMPHASIS            = V4L2_CID_MPEG_BASE + 107

V4L2_MPEG_AUDIO_EMPHASIS_NONE           = 0
V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS   = 1
V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17      = 2

V4L2_CID_MPEG_AUDIO_CRC                 = V4L2_CID_MPEG_BASE + 108

V4L2_MPEG_AUDIO_CRC_NONE                = 0
V4L2_MPEG_AUDIO_CRC_CRC16               = 1

V4L2_CID_MPEG_AUDIO_MUTE                = V4L2_CID_MPEG_BASE + 109
V4L2_CID_MPEG_AUDIO_AAC_BITRATE         = V4L2_CID_MPEG_BASE + 110
V4L2_CID_MPEG_AUDIO_AC3_BITRATE         = V4L2_CID_MPEG_BASE + 111

V4L2_MPEG_AUDIO_AC3_BITRATE_32K         = 0
V4L2_MPEG_AUDIO_AC3_BITRATE_40K         = 1
V4L2_MPEG_AUDIO_AC3_BITRATE_48K         = 2
V4L2_MPEG_AUDIO_AC3_BITRATE_56K         = 3
V4L2_MPEG_AUDIO_AC3_BITRATE_64K         = 4
V4L2_MPEG_AUDIO_AC3_BITRATE_80K         = 5
V4L2_MPEG_AUDIO_AC3_BITRATE_96K         = 6
V4L2_MPEG_AUDIO_AC3_BITRATE_112K        = 7
V4L2_MPEG_AUDIO_AC3_BITRATE_128K        = 8
V4L2_MPEG_AUDIO_AC3_BITRATE_160K        = 9
V4L2_MPEG_AUDIO_AC3_BITRATE_192K        = 10
V4L2_MPEG_AUDIO_AC3_BITRATE_224K        = 11
V4L2_MPEG_AUDIO_AC3_BITRATE_256K        = 12
V4L2_MPEG_AUDIO_AC3_BITRATE_320K        = 13
V4L2_MPEG_AUDIO_AC3_BITRATE_384K        = 14
V4L2_MPEG_AUDIO_AC3_BITRATE_448K        = 15
V4L2_MPEG_AUDIO_AC3_BITRATE_512K        = 16
V4L2_MPEG_AUDIO_AC3_BITRATE_576K        = 17
V4L2_MPEG_AUDIO_AC3_BITRATE_640K        = 18

V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK        = V4L2_CID_MPEG_BASE + 112

V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO               = 0
V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO             = 1
V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT               = 2
V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT              = 3
V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO               = 4
V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO     = 5

V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK   = V4L2_CID_MPEG_BASE + 113

V4L2_CID_MPEG_VIDEO_ENCODING            = V4L2_CID_MPEG_BASE + 200

V4L2_MPEG_VIDEO_ENCODING_MPEG_1         = 0
V4L2_MPEG_VIDEO_ENCODING_MPEG_2         = 1
V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC     = 2

V4L2_CID_MPEG_VIDEO_ASPECT              = V4L2_CID_MPEG_BASE + 201

V4L2_MPEG_VIDEO_ASPECT_1x1              = 0
V4L2_MPEG_VIDEO_ASPECT_4x3              = 1
V4L2_MPEG_VIDEO_ASPECT_16x9             = 2
V4L2_MPEG_VIDEO_ASPECT_221x100          = 3

V4L2_CID_MPEG_VIDEO_B_FRAMES            = V4L2_CID_MPEG_BASE + 202
V4L2_CID_MPEG_VIDEO_GOP_SIZE            = V4L2_CID_MPEG_BASE + 203
V4L2_CID_MPEG_VIDEO_GOP_CLOSURE         = V4L2_CID_MPEG_BASE + 204
V4L2_CID_MPEG_VIDEO_PULLDOWN            = V4L2_CID_MPEG_BASE + 205
V4L2_CID_MPEG_VIDEO_BITRATE_MODE        = V4L2_CID_MPEG_BASE + 206

V4L2_MPEG_VIDEO_BITRATE_MODE_VBR        = 0
V4L2_MPEG_VIDEO_BITRATE_MODE_CBR        = 1

V4L2_CID_MPEG_VIDEO_BITRATE                         = V4L2_CID_MPEG_BASE + 207
V4L2_CID_MPEG_VIDEO_BITRATE_PEAK                    = V4L2_CID_MPEG_BASE + 208
V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION             = V4L2_CID_MPEG_BASE + 209
V4L2_CID_MPEG_VIDEO_MUTE                            = V4L2_CID_MPEG_BASE + 210
V4L2_CID_MPEG_VIDEO_MUTE_YUV                        = V4L2_CID_MPEG_BASE + 211
V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE         = V4L2_CID_MPEG_BASE + 212
V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER    = V4L2_CID_MPEG_BASE + 213
V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB         = V4L2_CID_MPEG_BASE + 214
V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE                 = V4L2_CID_MPEG_BASE + 215
V4L2_CID_MPEG_VIDEO_HEADER_MODE                     = V4L2_CID_MPEG_BASE + 216

V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE                = 0
V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME   = 1

V4L2_CID_MPEG_VIDEO_MAX_REF_PIC                     = V4L2_CID_MPEG_BASE + 217
V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE                    = V4L2_CID_MPEG_BASE + 218
V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES           = V4L2_CID_MPEG_BASE + 219
V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB              = V4L2_CID_MPEG_BASE + 220
V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE                = V4L2_CID_MPEG_BASE + 221

V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE             = 0
V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_MB             = 1
V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_BYTES          = 2

V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB              = 1
V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES           = 2

V4L2_CID_MPEG_VIDEO_VBV_SIZE            = V4L2_CID_MPEG_BASE + 222
V4L2_CID_MPEG_VIDEO_DEC_PTS             = V4L2_CID_MPEG_BASE + 223
V4L2_CID_MPEG_VIDEO_DEC_FRAME           = V4L2_CID_MPEG_BASE + 224
V4L2_CID_MPEG_VIDEO_VBV_DELAY           = V4L2_CID_MPEG_BASE + 225
V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER   = V4L2_CID_MPEG_BASE + 226
V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE   = V4L2_CID_MPEG_BASE + 227
V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE   = V4L2_CID_MPEG_BASE + 228
V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME     = V4L2_CID_MPEG_BASE + 229


V4L2_CID_MPEG_VIDEO_MPEG2_LEVEL         = V4L2_CID_MPEG_BASE + 270

V4L2_MPEG_VIDEO_MPEG2_LEVEL_LOW         = 0
V4L2_MPEG_VIDEO_MPEG2_LEVEL_MAIN        = 1
V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH_1440   = 2
V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH        = 3

V4L2_CID_MPEG_VIDEO_MPEG2_PROFILE       = V4L2_CID_MPEG_BASE + 271

V4L2_MPEG_VIDEO_MPEG2_PROFILE_SIMPLE                = 0
V4L2_MPEG_VIDEO_MPEG2_PROFILE_MAIN                  = 1
V4L2_MPEG_VIDEO_MPEG2_PROFILE_SNR_SCALABLE          = 2
V4L2_MPEG_VIDEO_MPEG2_PROFILE_SPATIALLY_SCALABLE    = 3
V4L2_MPEG_VIDEO_MPEG2_PROFILE_HIGH                  = 4
V4L2_MPEG_VIDEO_MPEG2_PROFILE_MULTIVIEW             = 5

V4L2_CID_FWHT_I_FRAME_QP                = V4L2_CID_MPEG_BASE + 290
V4L2_CID_FWHT_P_FRAME_QP                = V4L2_CID_MPEG_BASE + 291

V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP     = V4L2_CID_MPEG_BASE + 300
V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP     = V4L2_CID_MPEG_BASE + 301
V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP     = V4L2_CID_MPEG_BASE + 302
V4L2_CID_MPEG_VIDEO_H263_MIN_QP         = V4L2_CID_MPEG_BASE + 303
V4L2_CID_MPEG_VIDEO_H263_MAX_QP         = V4L2_CID_MPEG_BASE + 304
V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP     = V4L2_CID_MPEG_BASE + 350
V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP     = V4L2_CID_MPEG_BASE + 351
V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP     = V4L2_CID_MPEG_BASE + 352
V4L2_CID_MPEG_VIDEO_H264_MIN_QP         = V4L2_CID_MPEG_BASE + 353
V4L2_CID_MPEG_VIDEO_H264_MAX_QP         = V4L2_CID_MPEG_BASE + 354
V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM  = V4L2_CID_MPEG_BASE + 355
V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE       = V4L2_CID_MPEG_BASE + 356
V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE   = V4L2_CID_MPEG_BASE + 357

V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC = 0
V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC = 1

V4L2_CID_MPEG_VIDEO_H264_I_PERIOD       = V4L2_CID_MPEG_BASE + 358
V4L2_CID_MPEG_VIDEO_H264_LEVEL          = V4L2_CID_MPEG_BASE + 359

V4L2_MPEG_VIDEO_H264_LEVEL_1_0          = 0
V4L2_MPEG_VIDEO_H264_LEVEL_1B           = 1
V4L2_MPEG_VIDEO_H264_LEVEL_1_1          = 2
V4L2_MPEG_VIDEO_H264_LEVEL_1_2          = 3
V4L2_MPEG_VIDEO_H264_LEVEL_1_3          = 4
V4L2_MPEG_VIDEO_H264_LEVEL_2_0          = 5
V4L2_MPEG_VIDEO_H264_LEVEL_2_1          = 6
V4L2_MPEG_VIDEO_H264_LEVEL_2_2          = 7
V4L2_MPEG_VIDEO_H264_LEVEL_3_0          = 8
V4L2_MPEG_VIDEO_H264_LEVEL_3_1          = 9
V4L2_MPEG_VIDEO_H264_LEVEL_3_2          = 10
V4L2_MPEG_VIDEO_H264_LEVEL_4_0          = 11
V4L2_MPEG_VIDEO_H264_LEVEL_4_1          = 12
V4L2_MPEG_VIDEO_H264_LEVEL_4_2          = 13
V4L2_MPEG_VIDEO_H264_LEVEL_5_0          = 14
V4L2_MPEG_VIDEO_H264_LEVEL_5_1          = 15

V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA  = V4L2_CID_MPEG_BASE + 360
V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA   = V4L2_CID_MPEG_BASE + 361
V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE   = V4L2_CID_MPEG_BASE + 362

V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED                       = 0
V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED                      = 1
V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY    = 2

V4L2_CID_MPEG_VIDEO_H264_PROFILE                    = V4L2_CID_MPEG_BASE + 363

V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE               = 0
V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE   = 1
V4L2_MPEG_VIDEO_H264_PROFILE_MAIN                   = 2
V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED               = 3
V4L2_MPEG_VIDEO_H264_PROFILE_HIGH                   = 4
V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10                = 5
V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422               = 6
V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE    = 7
V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA          = 8
V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA         = 9
V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA         = 10
V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA        = 11
V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE      = 12
V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH          = 13
V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA    = 14
V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH            = 15
V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH         = 16

V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT         = V4L2_CID_MPEG_BASE + 364
V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH          = V4L2_CID_MPEG_BASE + 365
V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE             = V4L2_CID_MPEG_BASE + 366
V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC                = V4L2_CID_MPEG_BASE + 367

V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED        = 0
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1                = 1
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11              = 2
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11              = 3
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11              = 4
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33              = 5
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11              = 6
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11              = 7
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11              = 8
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33              = 9
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11              = 10
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11              = 11
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33              = 12
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99             = 13
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3                = 14
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2                = 15
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1                = 16
V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED           = 17

V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING          = V4L2_CID_MPEG_BASE + 368
V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0     = V4L2_CID_MPEG_BASE + 369
V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE    = V4L2_CID_MPEG_BASE + 370

V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD   = 0
V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN         = 1
V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW            = 2
V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE   = 3
V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM     = 4
V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL       = 5

V4L2_CID_MPEG_VIDEO_H264_FMO            = V4L2_CID_MPEG_BASE + 371
V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE   = V4L2_CID_MPEG_BASE + 372

V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES        = 0
V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES          = 1
V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER = 2
V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT                   = 3
V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN               = 4
V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN                 = 5
V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT                  = 6

V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP        = V4L2_CID_MPEG_BASE + 373
V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION   = V4L2_CID_MPEG_BASE + 374

V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT   = 0
V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT    = 1

V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE            = V4L2_CID_MPEG_BASE + 375
V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH             = V4L2_CID_MPEG_BASE + 376
V4L2_CID_MPEG_VIDEO_H264_ASO                        = V4L2_CID_MPEG_BASE + 377
V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER            = V4L2_CID_MPEG_BASE + 378
V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING        = V4L2_CID_MPEG_BASE + 379
V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE   = V4L2_CID_MPEG_BASE + 380

V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B  = 0
V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P  = 1

V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER      = V4L2_CID_MPEG_BASE + 381
V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP   = V4L2_CID_MPEG_BASE + 382
V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION   = V4L2_CID_MPEG_BASE + 383
V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET         = V4L2_CID_MPEG_BASE + 384
V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP                 = V4L2_CID_MPEG_BASE + 385
V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP                 = V4L2_CID_MPEG_BASE + 386
V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP                 = V4L2_CID_MPEG_BASE + 387
V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP                 = V4L2_CID_MPEG_BASE + 388
V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP                    = V4L2_CID_MPEG_BASE + 400
V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP                    = V4L2_CID_MPEG_BASE + 401
V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP                    = V4L2_CID_MPEG_BASE + 402
V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP                        = V4L2_CID_MPEG_BASE + 403
V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP                        = V4L2_CID_MPEG_BASE + 404
V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL                         = V4L2_CID_MPEG_BASE + 405

V4L2_MPEG_VIDEO_MPEG4_LEVEL_0           = 0
V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B          = 1
V4L2_MPEG_VIDEO_MPEG4_LEVEL_1           = 2
V4L2_MPEG_VIDEO_MPEG4_LEVEL_2           = 3
V4L2_MPEG_VIDEO_MPEG4_LEVEL_3           = 4
V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B          = 5
V4L2_MPEG_VIDEO_MPEG4_LEVEL_4           = 6
V4L2_MPEG_VIDEO_MPEG4_LEVEL_5           = 7

V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE       = V4L2_CID_MPEG_BASE + 406

V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE                        = 0
V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE               = 1
V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE                          = 2
V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE               = 3
V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY    = 4

V4L2_CID_MPEG_VIDEO_MPEG4_QPEL          = V4L2_CID_MPEG_BASE + 407

V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS  = V4L2_CID_MPEG_BASE + 500

V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION     = 0
V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS    = 1
V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS    = 2
V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS    = 3

V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4 = V4L2_CID_MPEG_BASE + 501
V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES  = V4L2_CID_MPEG_BASE + 502

V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME     = 0
V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME     = 1
V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME     = 2

V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL            = V4L2_CID_MPEG_BASE + 503
V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS        = V4L2_CID_MPEG_BASE + 504
V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD = V4L2_CID_MPEG_BASE + 505
V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL        = V4L2_CID_MPEG_BASE + 506

V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV       = 0
V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD = 1

V4L2_CID_MPEG_VIDEO_VPX_MIN_QP          = V4L2_CID_MPEG_BASE + 507
V4L2_CID_MPEG_VIDEO_VPX_MAX_QP          = V4L2_CID_MPEG_BASE + 508
V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP      = V4L2_CID_MPEG_BASE + 509
V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP      = V4L2_CID_MPEG_BASE + 510

V4L2_CID_MPEG_VIDEO_VP8_PROFILE         = V4L2_CID_MPEG_BASE + 511

V4L2_MPEG_VIDEO_VP8_PROFILE_0           = 0
V4L2_MPEG_VIDEO_VP8_PROFILE_1           = 1
V4L2_MPEG_VIDEO_VP8_PROFILE_2           = 2
V4L2_MPEG_VIDEO_VP8_PROFILE_3           = 3

V4L2_CID_MPEG_VIDEO_VPX_PROFILE         = V4L2_CID_MPEG_VIDEO_VP8_PROFILE
V4L2_CID_MPEG_VIDEO_VP9_PROFILE         = V4L2_CID_MPEG_BASE + 512

V4L2_MPEG_VIDEO_VP9_PROFILE_0           = 0
V4L2_MPEG_VIDEO_VP9_PROFILE_1           = 1
V4L2_MPEG_VIDEO_VP9_PROFILE_2           = 2
V4L2_MPEG_VIDEO_VP9_PROFILE_3           = 3

V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP             = V4L2_CID_MPEG_BASE + 600
V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP             = V4L2_CID_MPEG_BASE + 601
V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP         = V4L2_CID_MPEG_BASE + 602
V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP         = V4L2_CID_MPEG_BASE + 603
V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP         = V4L2_CID_MPEG_BASE + 604
V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP            = V4L2_CID_MPEG_BASE + 605
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE   = V4L2_CID_MPEG_BASE + 606

V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_B  = 0
V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_P  = 1

V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER  = V4L2_CID_MPEG_BASE + 607
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP  = V4L2_CID_MPEG_BASE + 608
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP  = V4L2_CID_MPEG_BASE + 609
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP  = V4L2_CID_MPEG_BASE + 610
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP  = V4L2_CID_MPEG_BASE + 611
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP  = V4L2_CID_MPEG_BASE + 612
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP  = V4L2_CID_MPEG_BASE + 613
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP  = V4L2_CID_MPEG_BASE + 614
V4L2_CID_MPEG_VIDEO_HEVC_PROFILE            = V4L2_CID_MPEG_BASE + 615

V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN               = 0
V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE = 1
V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_10            = 2

V4L2_CID_MPEG_VIDEO_HEVC_LEVEL          = V4L2_CID_MPEG_BASE + 616

V4L2_MPEG_VIDEO_HEVC_LEVEL_1            = 0
V4L2_MPEG_VIDEO_HEVC_LEVEL_2            = 1
V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1          = 2
V4L2_MPEG_VIDEO_HEVC_LEVEL_3            = 3
V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1          = 4
V4L2_MPEG_VIDEO_HEVC_LEVEL_4            = 5
V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1          = 6
V4L2_MPEG_VIDEO_HEVC_LEVEL_5            = 7
V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1          = 8
V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2          = 9
V4L2_MPEG_VIDEO_HEVC_LEVEL_6            = 10
V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1          = 11
V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2          = 12

V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION  = V4L2_CID_MPEG_BASE + 617
V4L2_CID_MPEG_VIDEO_HEVC_TIER                   = V4L2_CID_MPEG_BASE + 618

V4L2_MPEG_VIDEO_HEVC_TIER_MAIN          = 0
V4L2_MPEG_VIDEO_HEVC_TIER_HIGH          = 1

V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH    = V4L2_CID_MPEG_BASE + 619
V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE       = V4L2_CID_MPEG_BASE + 620

V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED                      = 0
V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_ENABLED                       = 1
V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY    = 2

V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2    = V4L2_CID_MPEG_BASE + 621
V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2      = V4L2_CID_MPEG_BASE + 622
V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE           = V4L2_CID_MPEG_BASE + 623

V4L2_MPEG_VIDEO_HEVC_REFRESH_NONE       = 0
V4L2_MPEG_VIDEO_HEVC_REFRESH_CRA        = 1
V4L2_MPEG_VIDEO_HEVC_REFRESH_IDR        = 2

V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD             = V4L2_CID_MPEG_BASE + 624
V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU                = V4L2_CID_MPEG_BASE + 625
V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED           = V4L2_CID_MPEG_BASE + 626
V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT                  = V4L2_CID_MPEG_BASE + 627
V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB                 = V4L2_CID_MPEG_BASE + 628
V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID                = V4L2_CID_MPEG_BASE + 629
V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING           = V4L2_CID_MPEG_BASE + 630
V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1    = V4L2_CID_MPEG_BASE + 631
V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT             = V4L2_CID_MPEG_BASE + 632
V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION             = V4L2_CID_MPEG_BASE + 633
V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE          = V4L2_CID_MPEG_BASE + 634
V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD       = V4L2_CID_MPEG_BASE + 635

V4L2_MPEG_VIDEO_HEVC_SIZE_0             = 0
V4L2_MPEG_VIDEO_HEVC_SIZE_1             = 1
V4L2_MPEG_VIDEO_HEVC_SIZE_2             = 2
V4L2_MPEG_VIDEO_HEVC_SIZE_4             = 3

V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR  = V4L2_CID_MPEG_BASE + 636
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR  = V4L2_CID_MPEG_BASE + 637
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR  = V4L2_CID_MPEG_BASE + 638
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR  = V4L2_CID_MPEG_BASE + 639
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR  = V4L2_CID_MPEG_BASE + 640
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR  = V4L2_CID_MPEG_BASE + 641
V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR  = V4L2_CID_MPEG_BASE + 642
V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES  = V4L2_CID_MPEG_BASE + 643
V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR   = V4L2_CID_MPEG_BASE + 644

V4L2_CID_MPEG_CX2341X_BASE                      = V4L2_CTRL_CLASS_MPEG | 0x1000
V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE = V4L2_CID_MPEG_CX2341X_BASE + 0

V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL  = 0
V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO    = 1

V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER              = V4L2_CID_MPEG_CX2341X_BASE + 1
V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE    = V4L2_CID_MPEG_CX2341X_BASE + 2

V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF                    = 0
V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR                 = 1
V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT                = 2
V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE        = 3
V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE   = 4

V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE      = V4L2_CID_MPEG_CX2341X_BASE + 3

V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF      = 0
V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR   = 1

V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE    = V4L2_CID_MPEG_CX2341X_BASE + 4

V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL = 0
V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO   = 1

V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER         = V4L2_CID_MPEG_CX2341X_BASE + 5
V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE      = V4L2_CID_MPEG_CX2341X_BASE + 6

V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF      = 0
V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR      = 1
V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT     = 2
V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT = 3
V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG     = 4

V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM   = V4L2_CID_MPEG_CX2341X_BASE + 7
V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP      = V4L2_CID_MPEG_CX2341X_BASE + 8
V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM = V4L2_CID_MPEG_CX2341X_BASE + 9
V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP    = V4L2_CID_MPEG_CX2341X_BASE + 10
V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS         = V4L2_CID_MPEG_CX2341X_BASE + 11

V4L2_CID_MPEG_MFC51_BASE                                = V4L2_CTRL_CLASS_MPEG | 0x1100

V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY        = V4L2_CID_MPEG_MFC51_BASE + 0
V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE = V4L2_CID_MPEG_MFC51_BASE + 1
V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE                   = V4L2_CID_MPEG_MFC51_BASE + 2

V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED      = 0
V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT   = 1
V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT     = 2

V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE          = V4L2_CID_MPEG_MFC51_BASE + 3

V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED     = 0
V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME      = 1
V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED    = 2

V4L2_CID_MPEG_MFC51_VIDEO_PADDING                   = V4L2_CID_MPEG_MFC51_BASE + 4
V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV               = V4L2_CID_MPEG_MFC51_BASE + 5
V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT       = V4L2_CID_MPEG_MFC51_BASE + 6
V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF         = V4L2_CID_MPEG_MFC51_BASE + 7
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY = V4L2_CID_MPEG_MFC51_BASE + 50
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK     = V4L2_CID_MPEG_MFC51_BASE + 51
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH   = V4L2_CID_MPEG_MFC51_BASE + 52
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC   = V4L2_CID_MPEG_MFC51_BASE + 53
V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P    = V4L2_CID_MPEG_MFC51_BASE + 54

V4L2_CID_CAMERA_CLASS_BASE              = V4L2_CTRL_CLASS_CAMERA | 0x900
V4L2_CID_CAMERA_CLASS                   = V4L2_CTRL_CLASS_CAMERA | 1

V4L2_CID_EXPOSURE_AUTO                  = V4L2_CID_CAMERA_CLASS_BASE + 1

V4L2_EXPOSURE_AUTO                      = 0
V4L2_EXPOSURE_MANUAL                    = 1
V4L2_EXPOSURE_SHUTTER_PRIORITY          = 2
V4L2_EXPOSURE_APERTURE_PRIORITY         = 3

V4L2_CID_EXPOSURE_ABSOLUTE              = V4L2_CID_CAMERA_CLASS_BASE + 2
V4L2_CID_EXPOSURE_AUTO_PRIORITY         = V4L2_CID_CAMERA_CLASS_BASE + 3

V4L2_CID_PAN_RELATIVE                   = V4L2_CID_CAMERA_CLASS_BASE + 4
V4L2_CID_TILT_RELATIVE                  = V4L2_CID_CAMERA_CLASS_BASE + 5
V4L2_CID_PAN_RESET                      = V4L2_CID_CAMERA_CLASS_BASE + 6
V4L2_CID_TILT_RESET                     = V4L2_CID_CAMERA_CLASS_BASE + 7

V4L2_CID_PAN_ABSOLUTE                   = V4L2_CID_CAMERA_CLASS_BASE + 8
V4L2_CID_TILT_ABSOLUTE                  = V4L2_CID_CAMERA_CLASS_BASE + 9

V4L2_CID_FOCUS_ABSOLUTE                 = V4L2_CID_CAMERA_CLASS_BASE + 10
V4L2_CID_FOCUS_RELATIVE                 = V4L2_CID_CAMERA_CLASS_BASE + 11
V4L2_CID_FOCUS_AUTO                     = V4L2_CID_CAMERA_CLASS_BASE + 12

V4L2_CID_ZOOM_ABSOLUTE                  = V4L2_CID_CAMERA_CLASS_BASE + 13
V4L2_CID_ZOOM_RELATIVE                  = V4L2_CID_CAMERA_CLASS_BASE + 14
V4L2_CID_ZOOM_CONTINUOUS                = V4L2_CID_CAMERA_CLASS_BASE + 15

V4L2_CID_PRIVACY                        = V4L2_CID_CAMERA_CLASS_BASE + 16

V4L2_CID_IRIS_ABSOLUTE                  = V4L2_CID_CAMERA_CLASS_BASE + 17
V4L2_CID_IRIS_RELATIVE                  = V4L2_CID_CAMERA_CLASS_BASE + 18

V4L2_CID_AUTO_EXPOSURE_BIAS             = V4L2_CID_CAMERA_CLASS_BASE + 19

V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE    = V4L2_CID_CAMERA_CLASS_BASE + 20

V4L2_WHITE_BALANCE_MANUAL               = 0
V4L2_WHITE_BALANCE_AUTO                 = 1
V4L2_WHITE_BALANCE_INCANDESCENT         = 2
V4L2_WHITE_BALANCE_FLUORESCENT          = 3
V4L2_WHITE_BALANCE_FLUORESCENT_H        = 4
V4L2_WHITE_BALANCE_HORIZON              = 5
V4L2_WHITE_BALANCE_DAYLIGHT             = 6
V4L2_WHITE_BALANCE_FLASH                = 7
V4L2_WHITE_BALANCE_CLOUDY               = 8
V4L2_WHITE_BALANCE_SHADE                = 9

V4L2_CID_WIDE_DYNAMIC_RANGE             = V4L2_CID_CAMERA_CLASS_BASE + 21
V4L2_CID_IMAGE_STABILIZATION            = V4L2_CID_CAMERA_CLASS_BASE + 22

V4L2_CID_ISO_SENSITIVITY                = V4L2_CID_CAMERA_CLASS_BASE + 23
V4L2_CID_ISO_SENSITIVITY_AUTO           = V4L2_CID_CAMERA_CLASS_BASE + 24

V4L2_ISO_SENSITIVITY_MANUAL             = 0
V4L2_ISO_SENSITIVITY_AUTO               = 1

V4L2_CID_EXPOSURE_METERING              = V4L2_CID_CAMERA_CLASS_BASE + 25

V4L2_EXPOSURE_METERING_AVERAGE          = 0
V4L2_EXPOSURE_METERING_CENTER_WEIGHTED  = 1
V4L2_EXPOSURE_METERING_SPOT             = 2
V4L2_EXPOSURE_METERING_MATRIX           = 3

V4L2_CID_SCENE_MODE                     = V4L2_CID_CAMERA_CLASS_BASE + 26

V4L2_SCENE_MODE_NONE                    = 0
V4L2_SCENE_MODE_BACKLIGHT               = 1
V4L2_SCENE_MODE_BEACH_SNOW              = 2
V4L2_SCENE_MODE_CANDLE_LIGHT            = 3
V4L2_SCENE_MODE_DAWN_DUSK               = 4
V4L2_SCENE_MODE_FALL_COLORS             = 5
V4L2_SCENE_MODE_FIREWORKS               = 6
V4L2_SCENE_MODE_LANDSCAPE               = 7
V4L2_SCENE_MODE_NIGHT                   = 8
V4L2_SCENE_MODE_PARTY_INDOOR            = 9
V4L2_SCENE_MODE_PORTRAIT                = 10
V4L2_SCENE_MODE_SPORTS                  = 11
V4L2_SCENE_MODE_SUNSET                  = 12
V4L2_SCENE_MODE_TEXT                    = 13

V4L2_CID_3A_LOCK                        = V4L2_CID_CAMERA_CLASS_BASE + 27
V4L2_LOCK_EXPOSURE                      = 1 << 0
V4L2_LOCK_WHITE_BALANCE                 = 1 << 1
V4L2_LOCK_FOCUS                         = 1 << 2

V4L2_CID_AUTO_FOCUS_START               = V4L2_CID_CAMERA_CLASS_BASE + 28
V4L2_CID_AUTO_FOCUS_STOP                = V4L2_CID_CAMERA_CLASS_BASE + 29
V4L2_CID_AUTO_FOCUS_STATUS              = V4L2_CID_CAMERA_CLASS_BASE + 30
V4L2_AUTO_FOCUS_STATUS_IDLE             = 0 << 0
V4L2_AUTO_FOCUS_STATUS_BUSY             = 1 << 0
V4L2_AUTO_FOCUS_STATUS_REACHED          = 1 << 1
V4L2_AUTO_FOCUS_STATUS_FAILED           = 1 << 2

V4L2_CID_AUTO_FOCUS_RANGE               = V4L2_CID_CAMERA_CLASS_BASE + 31

V4L2_AUTO_FOCUS_RANGE_AUTO              = 0
V4L2_AUTO_FOCUS_RANGE_NORMAL            = 1
V4L2_AUTO_FOCUS_RANGE_MACRO             = 2
V4L2_AUTO_FOCUS_RANGE_INFINITY          = 3

V4L2_CID_PAN_SPEED                      = V4L2_CID_CAMERA_CLASS_BASE + 32
V4L2_CID_TILT_SPEED                     = V4L2_CID_CAMERA_CLASS_BASE + 33

V4L2_CID_FM_TX_CLASS_BASE               = V4L2_CTRL_CLASS_FM_TX | 0x900
V4L2_CID_FM_TX_CLASS                    = V4L2_CTRL_CLASS_FM_TX | 1

V4L2_CID_RDS_TX_DEVIATION               = V4L2_CID_FM_TX_CLASS_BASE + 1
V4L2_CID_RDS_TX_PI                      = V4L2_CID_FM_TX_CLASS_BASE + 2
V4L2_CID_RDS_TX_PTY                     = V4L2_CID_FM_TX_CLASS_BASE + 3
V4L2_CID_RDS_TX_PS_NAME                 = V4L2_CID_FM_TX_CLASS_BASE + 5
V4L2_CID_RDS_TX_RADIO_TEXT              = V4L2_CID_FM_TX_CLASS_BASE + 6
V4L2_CID_RDS_TX_MONO_STEREO             = V4L2_CID_FM_TX_CLASS_BASE + 7
V4L2_CID_RDS_TX_ARTIFICIAL_HEAD         = V4L2_CID_FM_TX_CLASS_BASE + 8
V4L2_CID_RDS_TX_COMPRESSED              = V4L2_CID_FM_TX_CLASS_BASE + 9
V4L2_CID_RDS_TX_DYNAMIC_PTY             = V4L2_CID_FM_TX_CLASS_BASE + 10
V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT    = V4L2_CID_FM_TX_CLASS_BASE + 11
V4L2_CID_RDS_TX_TRAFFIC_PROGRAM         = V4L2_CID_FM_TX_CLASS_BASE + 12
V4L2_CID_RDS_TX_MUSIC_SPEECH            = V4L2_CID_FM_TX_CLASS_BASE + 13
V4L2_CID_RDS_TX_ALT_FREQS_ENABLE        = V4L2_CID_FM_TX_CLASS_BASE + 14
V4L2_CID_RDS_TX_ALT_FREQS               = V4L2_CID_FM_TX_CLASS_BASE + 15

V4L2_CID_AUDIO_LIMITER_ENABLED          = V4L2_CID_FM_TX_CLASS_BASE + 64
V4L2_CID_AUDIO_LIMITER_RELEASE_TIME     = V4L2_CID_FM_TX_CLASS_BASE + 65
V4L2_CID_AUDIO_LIMITER_DEVIATION        = V4L2_CID_FM_TX_CLASS_BASE + 66

V4L2_CID_AUDIO_COMPRESSION_ENABLED      = V4L2_CID_FM_TX_CLASS_BASE + 80
V4L2_CID_AUDIO_COMPRESSION_GAIN         = V4L2_CID_FM_TX_CLASS_BASE + 81
V4L2_CID_AUDIO_COMPRESSION_THRESHOLD    = V4L2_CID_FM_TX_CLASS_BASE + 82
V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME  = V4L2_CID_FM_TX_CLASS_BASE + 83
V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME = V4L2_CID_FM_TX_CLASS_BASE + 84

V4L2_CID_PILOT_TONE_ENABLED             = V4L2_CID_FM_TX_CLASS_BASE + 96
V4L2_CID_PILOT_TONE_DEVIATION           = V4L2_CID_FM_TX_CLASS_BASE + 97
V4L2_CID_PILOT_TONE_FREQUENCY           = V4L2_CID_FM_TX_CLASS_BASE + 98

V4L2_CID_TUNE_PREEMPHASIS               = V4L2_CID_FM_TX_CLASS_BASE + 112

V4L2_PREEMPHASIS_DISABLED               = 0
V4L2_PREEMPHASIS_50_uS                  = 1
V4L2_PREEMPHASIS_75_uS                  = 2

V4L2_CID_TUNE_POWER_LEVEL               = V4L2_CID_FM_TX_CLASS_BASE + 113
V4L2_CID_TUNE_ANTENNA_CAPACITOR         = V4L2_CID_FM_TX_CLASS_BASE + 114

V4L2_CID_FLASH_CLASS_BASE               = V4L2_CTRL_CLASS_FLASH | 0x900
V4L2_CID_FLASH_CLASS                    = V4L2_CTRL_CLASS_FLASH | 1

V4L2_CID_FLASH_LED_MODE                 = V4L2_CID_FLASH_CLASS_BASE + 1

V4L2_FLASH_LED_MODE_NONE                = 0
V4L2_FLASH_LED_MODE_FLASH               = 1
V4L2_FLASH_LED_MODE_TORCH               = 2

V4L2_CID_FLASH_STROBE_SOURCE            = V4L2_CID_FLASH_CLASS_BASE + 2

V4L2_FLASH_STROBE_SOURCE_SOFTWARE       = 0
V4L2_FLASH_STROBE_SOURCE_EXTERNAL       = 1

V4L2_CID_FLASH_STROBE                   = V4L2_CID_FLASH_CLASS_BASE + 3
V4L2_CID_FLASH_STROBE_STOP              = V4L2_CID_FLASH_CLASS_BASE + 4
V4L2_CID_FLASH_STROBE_STATUS            = V4L2_CID_FLASH_CLASS_BASE + 5

V4L2_CID_FLASH_TIMEOUT                  = V4L2_CID_FLASH_CLASS_BASE + 6
V4L2_CID_FLASH_INTENSITY                = V4L2_CID_FLASH_CLASS_BASE + 7
V4L2_CID_FLASH_TORCH_INTENSITY          = V4L2_CID_FLASH_CLASS_BASE + 8
V4L2_CID_FLASH_INDICATOR_INTENSITY      = V4L2_CID_FLASH_CLASS_BASE + 9

V4L2_CID_FLASH_FAULT                    = V4L2_CID_FLASH_CLASS_BASE + 10
V4L2_FLASH_FAULT_OVER_VOLTAGE           = 1 << 0
V4L2_FLASH_FAULT_TIMEOUT                = 1 << 1
V4L2_FLASH_FAULT_OVER_TEMPERATURE       = 1 << 2
V4L2_FLASH_FAULT_SHORT_CIRCUIT          = 1 << 3
V4L2_FLASH_FAULT_OVER_CURRENT           = 1 << 4
V4L2_FLASH_FAULT_INDICATOR              = 1 << 5
V4L2_FLASH_FAULT_UNDER_VOLTAGE          = 1 << 6
V4L2_FLASH_FAULT_INPUT_VOLTAGE          = 1 << 7
V4L2_FLASH_FAULT_LED_OVER_TEMPERATURE   = 1 << 8

V4L2_CID_FLASH_CHARGE                   = V4L2_CID_FLASH_CLASS_BASE + 11
V4L2_CID_FLASH_READY                    = V4L2_CID_FLASH_CLASS_BASE + 12

V4L2_CID_JPEG_CLASS_BASE                = V4L2_CTRL_CLASS_JPEG | 0x900
V4L2_CID_JPEG_CLASS                     = V4L2_CTRL_CLASS_JPEG | 1

V4L2_CID_JPEG_CHROMA_SUBSAMPLING        = V4L2_CID_JPEG_CLASS_BASE + 1

V4L2_JPEG_CHROMA_SUBSAMPLING_444        = 0
V4L2_JPEG_CHROMA_SUBSAMPLING_422        = 1
V4L2_JPEG_CHROMA_SUBSAMPLING_420        = 2
V4L2_JPEG_CHROMA_SUBSAMPLING_411        = 3
V4L2_JPEG_CHROMA_SUBSAMPLING_410        = 4
V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY       = 5

V4L2_CID_JPEG_RESTART_INTERVAL          = V4L2_CID_JPEG_CLASS_BASE + 2
V4L2_CID_JPEG_COMPRESSION_QUALITY       = V4L2_CID_JPEG_CLASS_BASE + 3

V4L2_CID_JPEG_ACTIVE_MARKER             = V4L2_CID_JPEG_CLASS_BASE + 4
V4L2_JPEG_ACTIVE_MARKER_APP0            = 1 << 0
V4L2_JPEG_ACTIVE_MARKER_APP1            = 1 << 1
V4L2_JPEG_ACTIVE_MARKER_COM             = 1 << 16
V4L2_JPEG_ACTIVE_MARKER_DQT             = 1 << 17
V4L2_JPEG_ACTIVE_MARKER_DHT             = 1 << 18

V4L2_CID_IMAGE_SOURCE_CLASS_BASE        = V4L2_CTRL_CLASS_IMAGE_SOURCE | 0x900
V4L2_CID_IMAGE_SOURCE_CLASS             = V4L2_CTRL_CLASS_IMAGE_SOURCE | 1

V4L2_CID_VBLANK                         = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 1
V4L2_CID_HBLANK                         = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 2
V4L2_CID_ANALOGUE_GAIN                  = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 3
V4L2_CID_TEST_PATTERN_RED               = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 4
V4L2_CID_TEST_PATTERN_GREENR            = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 5
V4L2_CID_TEST_PATTERN_BLUE              = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 6
V4L2_CID_TEST_PATTERN_GREENB            = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 7

V4L2_CID_IMAGE_PROC_CLASS_BASE          = V4L2_CTRL_CLASS_IMAGE_PROC | 0x900
V4L2_CID_IMAGE_PROC_CLASS               = V4L2_CTRL_CLASS_IMAGE_PROC | 1

V4L2_CID_LINK_FREQ                      = V4L2_CID_IMAGE_PROC_CLASS_BASE + 1
V4L2_CID_PIXEL_RATE                     = V4L2_CID_IMAGE_PROC_CLASS_BASE + 2
V4L2_CID_TEST_PATTERN                   = V4L2_CID_IMAGE_PROC_CLASS_BASE + 3
V4L2_CID_DEINTERLACING_MODE             = V4L2_CID_IMAGE_PROC_CLASS_BASE + 4
V4L2_CID_DIGITAL_GAIN                   = V4L2_CID_IMAGE_PROC_CLASS_BASE + 5

V4L2_CID_DV_CLASS_BASE                  = V4L2_CTRL_CLASS_DV | 0x900
V4L2_CID_DV_CLASS                       = V4L2_CTRL_CLASS_DV | 1

V4L2_CID_DV_TX_HOTPLUG                  = V4L2_CID_DV_CLASS_BASE + 1
V4L2_CID_DV_TX_RXSENSE                  = V4L2_CID_DV_CLASS_BASE + 2
V4L2_CID_DV_TX_EDID_PRESENT             = V4L2_CID_DV_CLASS_BASE + 3
V4L2_CID_DV_TX_MODE                     = V4L2_CID_DV_CLASS_BASE + 4

V4L2_DV_TX_MODE_DVI_D                   = 0
V4L2_DV_TX_MODE_HDMI                    = 1

V4L2_CID_DV_TX_RGB_RANGE                = V4L2_CID_DV_CLASS_BASE + 5

V4L2_DV_RGB_RANGE_AUTO                  = 0
V4L2_DV_RGB_RANGE_LIMITED               = 1
V4L2_DV_RGB_RANGE_FULL                  = 2

V4L2_CID_DV_TX_IT_CONTENT_TYPE          = V4L2_CID_DV_CLASS_BASE + 6

V4L2_DV_IT_CONTENT_TYPE_GRAPHICS        = 0
V4L2_DV_IT_CONTENT_TYPE_PHOTO           = 1
V4L2_DV_IT_CONTENT_TYPE_CINEMA          = 2
V4L2_DV_IT_CONTENT_TYPE_GAME            = 3
V4L2_DV_IT_CONTENT_TYPE_NO_ITC          = 4

V4L2_CID_DV_RX_POWER_PRESENT            = V4L2_CID_DV_CLASS_BASE + 100
V4L2_CID_DV_RX_RGB_RANGE                = V4L2_CID_DV_CLASS_BASE + 101
V4L2_CID_DV_RX_IT_CONTENT_TYPE          = V4L2_CID_DV_CLASS_BASE + 102

V4L2_CID_FM_RX_CLASS_BASE               = V4L2_CTRL_CLASS_FM_RX | 0x900
V4L2_CID_FM_RX_CLASS                    = V4L2_CTRL_CLASS_FM_RX | 1

V4L2_CID_TUNE_DEEMPHASIS                = V4L2_CID_FM_RX_CLASS_BASE + 1

V4L2_DEEMPHASIS_DISABLED                = V4L2_PREEMPHASIS_DISABLED
V4L2_DEEMPHASIS_50_uS                   = V4L2_PREEMPHASIS_50_uS
V4L2_DEEMPHASIS_75_uS                   = V4L2_PREEMPHASIS_75_uS

V4L2_CID_RDS_RECEPTION                  = V4L2_CID_FM_RX_CLASS_BASE + 2
V4L2_CID_RDS_RX_PTY                     = V4L2_CID_FM_RX_CLASS_BASE + 3
V4L2_CID_RDS_RX_PS_NAME                 = V4L2_CID_FM_RX_CLASS_BASE + 4
V4L2_CID_RDS_RX_RADIO_TEXT              = V4L2_CID_FM_RX_CLASS_BASE + 5
V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT    = V4L2_CID_FM_RX_CLASS_BASE + 6
V4L2_CID_RDS_RX_TRAFFIC_PROGRAM         = V4L2_CID_FM_RX_CLASS_BASE + 7
V4L2_CID_RDS_RX_MUSIC_SPEECH            = V4L2_CID_FM_RX_CLASS_BASE + 8

V4L2_CID_RF_TUNER_CLASS_BASE            = V4L2_CTRL_CLASS_RF_TUNER | 0x900
V4L2_CID_RF_TUNER_CLASS                 = V4L2_CTRL_CLASS_RF_TUNER | 1

V4L2_CID_RF_TUNER_BANDWIDTH_AUTO        = V4L2_CID_RF_TUNER_CLASS_BASE + 11
V4L2_CID_RF_TUNER_BANDWIDTH             = V4L2_CID_RF_TUNER_CLASS_BASE + 12
V4L2_CID_RF_TUNER_RF_GAIN               = V4L2_CID_RF_TUNER_CLASS_BASE + 32
V4L2_CID_RF_TUNER_LNA_GAIN_AUTO         = V4L2_CID_RF_TUNER_CLASS_BASE + 41
V4L2_CID_RF_TUNER_LNA_GAIN              = V4L2_CID_RF_TUNER_CLASS_BASE + 42
V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO       = V4L2_CID_RF_TUNER_CLASS_BASE + 51
V4L2_CID_RF_TUNER_MIXER_GAIN            = V4L2_CID_RF_TUNER_CLASS_BASE + 52
V4L2_CID_RF_TUNER_IF_GAIN_AUTO          = V4L2_CID_RF_TUNER_CLASS_BASE + 61
V4L2_CID_RF_TUNER_IF_GAIN               = V4L2_CID_RF_TUNER_CLASS_BASE + 62
V4L2_CID_RF_TUNER_PLL_LOCK              = V4L2_CID_RF_TUNER_CLASS_BASE + 91

V4L2_CID_DETECT_CLASS_BASE              = V4L2_CTRL_CLASS_DETECT | 0x900
V4L2_CID_DETECT_CLASS                   = V4L2_CTRL_CLASS_DETECT | 1

V4L2_CID_DETECT_MD_MODE                 = V4L2_CID_DETECT_CLASS_BASE + 1

V4L2_DETECT_MD_MODE_DISABLED            = 0
V4L2_DETECT_MD_MODE_GLOBAL              = 1
V4L2_DETECT_MD_MODE_THRESHOLD_GRID      = 2
V4L2_DETECT_MD_MODE_REGION_GRID         = 3

V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD     = V4L2_CID_DETECT_CLASS_BASE + 2
V4L2_CID_DETECT_MD_THRESHOLD_GRID       = V4L2_CID_DETECT_CLASS_BASE + 3
V4L2_CID_DETECT_MD_REGION_GRID          = V4L2_CID_DETECT_CLASS_BASE + 4
# @formatter:on

#
# <linux/videodev2.h>
#

# @formatter:off
VIDEO_MAX_FRAME                         = 32
VIDEO_MAX_PLANES                        = 8
# @formatter:on


def v4l2_fourcc(a, b, c, d):
    return ord(a) | (ord(b) << 8) | (ord(c) << 16) | (ord(d) << 24)


def v4l2_fourcc_be(a, b, c, d):
    return v4l2_fourcc(a, b, c, d) | (1 << 31)


# @formatter:off
V4L2_FIELD_ANY                          = 0
V4L2_FIELD_NONE                         = 1
V4L2_FIELD_TOP                          = 2
V4L2_FIELD_BOTTOM                       = 3
V4L2_FIELD_INTERLACED                   = 4
V4L2_FIELD_SEQ_TB                       = 5
V4L2_FIELD_SEQ_BT                       = 6
V4L2_FIELD_ALTERNATE                    = 7
V4L2_FIELD_INTERLACED_TB                = 8
V4L2_FIELD_INTERLACED_BT                = 9
# @formatter:on


def V4L2_FIELD_HAS_TOP(field):
    return \
        field == V4L2_FIELD_TOP or \
        field == V4L2_FIELD_INTERLACED or \
        field == V4L2_FIELD_INTERLACED_TB or \
        field == V4L2_FIELD_INTERLACED_BT or \
        field == V4L2_FIELD_SEQ_TB or \
        field == V4L2_FIELD_SEQ_BT


def V4L2_FIELD_HAS_BOTTOM(field):
    return \
        field == V4L2_FIELD_BOTTOM or \
        field == V4L2_FIELD_INTERLACED or \
        field == V4L2_FIELD_INTERLACED_TB or \
        field == V4L2_FIELD_INTERLACED_BT or \
        field == V4L2_FIELD_SEQ_TB or \
        field == V4L2_FIELD_SEQ_BT


def V4L2_FIELD_HAS_BOTH(field):
    return \
        field == V4L2_FIELD_INTERLACED or \
        field == V4L2_FIELD_INTERLACED_TB or \
        field == V4L2_FIELD_INTERLACED_BT or \
        field == V4L2_FIELD_SEQ_TB or \
        field == V4L2_FIELD_SEQ_BT


def V4L2_FIELD_HAS_T_OR_B(field):
    return \
        field == V4L2_FIELD_BOTTOM or \
        field == V4L2_FIELD_TOP or \
        field == V4L2_FIELD_ALTERNATE


def V4L2_FIELD_IS_INTERLACED(field):
    return \
        field == V4L2_FIELD_INTERLACED or \
        field == V4L2_FIELD_INTERLACED_TB or \
        field == V4L2_FIELD_INTERLACED_BT


def V4L2_FIELD_IS_SEQUENTIAL(field):
    return \
        field == V4L2_FIELD_SEQ_TB or \
        field == V4L2_FIELD_SEQ_BT


# @formatter:off
V4L2_BUF_TYPE_VIDEO_CAPTURE             = 1
V4L2_BUF_TYPE_VIDEO_OUTPUT              = 2
V4L2_BUF_TYPE_VIDEO_OVERLAY             = 3
V4L2_BUF_TYPE_VBI_CAPTURE               = 4
V4L2_BUF_TYPE_VBI_OUTPUT                = 5
V4L2_BUF_TYPE_SLICED_VBI_CAPTURE        = 6
V4L2_BUF_TYPE_SLICED_VBI_OUTPUT         = 7
V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY      = 8
V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE      = 9
V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE       = 10
V4L2_BUF_TYPE_SDR_CAPTURE               = 11
V4L2_BUF_TYPE_SDR_OUTPUT                = 12
V4L2_BUF_TYPE_META_CAPTURE              = 13
V4L2_BUF_TYPE_META_OUTPUT               = 14
V4L2_BUF_TYPE_PRIVATE                   = 0x80
# @formatter:on


def V4L2_TYPE_IS_MULTIPLANAR(type):
    return \
        type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE or \
        type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE


def V4L2_TYPE_IS_OUTPUT(type):
    return \
        type == V4L2_BUF_TYPE_VIDEO_OUTPUT or \
        type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE or \
        type == V4L2_BUF_TYPE_VIDEO_OVERLAY or \
        type == V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY or \
        type == V4L2_BUF_TYPE_VBI_OUTPUT or \
        type == V4L2_BUF_TYPE_SLICED_VBI_OUTPUT or \
        type == V4L2_BUF_TYPE_SDR_OUTPUT or \
        type == V4L2_BUF_TYPE_META_OUTPUT


# @formatter:off
V4L2_TUNER_RADIO                        = 1
V4L2_TUNER_ANALOG_TV                    = 2
V4L2_TUNER_DIGITAL_TV                   = 3
V4L2_TUNER_SDR                          = 4
V4L2_TUNER_RF                           = 5

V4L2_MEMORY_MMAP                        = 1
V4L2_MEMORY_USERPTR                     = 2
V4L2_MEMORY_OVERLAY                     = 3
V4L2_MEMORY_DMABUF                      = 4

V4L2_COLORSPACE_DEFAULT                 = 0
V4L2_COLORSPACE_SMPTE170M               = 1
V4L2_COLORSPACE_SMPTE240M               = 2
V4L2_COLORSPACE_REC709                  = 3
V4L2_COLORSPACE_BT878                   = 4
V4L2_COLORSPACE_470_SYSTEM_M            = 5
V4L2_COLORSPACE_470_SYSTEM_BG           = 6
V4L2_COLORSPACE_JPEG                    = 7
V4L2_COLORSPACE_SRGB                    = 8
V4L2_COLORSPACE_OPRGB                   = 9
V4L2_COLORSPACE_BT2020                  = 10
V4L2_COLORSPACE_RAW                     = 11
V4L2_COLORSPACE_DCI_P3                  = 12
# @formatter:on


def V4L2_MAP_COLORSPACE_DEFAULT(is_sdtv, is_hdtv):
    if is_sdtv:
        return V4L2_COLORSPACE_SMPTE170M
    elif is_hdtv:
        return V4L2_COLORSPACE_REC709
    else:
        return V4L2_COLORSPACE_SRGB


# @formatter:off
V4L2_XFER_FUNC_DEFAULT                  = 0
V4L2_XFER_FUNC_709                      = 1
V4L2_XFER_FUNC_SRGB                     = 2
V4L2_XFER_FUNC_OPRGB                    = 3
V4L2_XFER_FUNC_SMPTE240M                = 4
V4L2_XFER_FUNC_NONE                     = 5
V4L2_XFER_FUNC_DCI_P3                   = 6
V4L2_XFER_FUNC_SMPTE2084                = 7
# @formatter:on


def V4L2_MAP_XFER_FUNC_DEFAULT(colsp):
    if colsp == V4L2_COLORSPACE_OPRGB:
        return V4L2_XFER_FUNC_OPRGB
    elif colsp == V4L2_COLORSPACE_SMPTE240M:
        return V4L2_XFER_FUNC_SMPTE240M
    elif colsp == V4L2_COLORSPACE_DCI_P3:
        return V4L2_XFER_FUNC_DCI_P3
    elif colsp == V4L2_COLORSPACE_RAW:
        return V4L2_XFER_FUNC_NONE
    elif colsp == V4L2_COLORSPACE_SRGB or colsp == V4L2_COLORSPACE_JPEG:
        return V4L2_XFER_FUNC_SRGB
    else:
        return V4L2_XFER_FUNC_709


# @formatter:off
V4L2_YCBCR_ENC_DEFAULT                  = 0
V4L2_YCBCR_ENC_601                      = 1
V4L2_YCBCR_ENC_709                      = 2
V4L2_YCBCR_ENC_XV601                    = 3
V4L2_YCBCR_ENC_XV709                    = 4
V4L2_YCBCR_ENC_SYCC                     = 5
V4L2_YCBCR_ENC_BT2020                   = 6
V4L2_YCBCR_ENC_BT2020_CONST_LUM         = 7
V4L2_YCBCR_ENC_SMPTE240M                = 8
# @formatter:on

# @formatter:off
V4L2_HSV_ENC_180                        = 128
V4L2_HSV_ENC_256                        = 129
# @formatter:on


def V4L2_MAP_YCBCR_ENC_DEFAULT(colsp):
    if colsp == V4L2_COLORSPACE_REC709 or colsp == V4L2_COLORSPACE_DCI_P3:
        return V4L2_YCBCR_ENC_709
    elif colsp == V4L2_COLORSPACE_BT2020:
        return V4L2_YCBCR_ENC_BT2020
    elif colsp == V4L2_COLORSPACE_SMPTE240M:
        return V4L2_YCBCR_ENC_SMPTE240M
    else:
        return V4L2_YCBCR_ENC_601


# @formatter:off
V4L2_QUANTIZATION_DEFAULT               = 0
V4L2_QUANTIZATION_FULL_RANGE            = 1
V4L2_QUANTIZATION_LIM_RANGE             = 2
# @formatter:on


def V4L2_MAP_QUANTIZATION_DEFAULT(is_rgb_or_hsv, colsp, ycbcr_enc):
    if is_rgb_or_hsv or colsp == V4L2_COLORSPACE_JPEG:
        return V4L2_QUANTIZATION_FULL_RANGE
    else:
        return V4L2_QUANTIZATION_LIM_RANGE


# @formatter:off
V4L2_PRIORITY_UNSET                     = 0
V4L2_PRIORITY_BACKGROUND                = 1
V4L2_PRIORITY_INTERACTIVE               = 2
V4L2_PRIORITY_RECORD                    = 3
V4L2_PRIORITY_DEFAULT                   = V4L2_PRIORITY_INTERACTIVE
# @formatter:on


class v4l2_rect(ctypes.Structure):
    _fields_ = [
        ("left", ctypes.c_int32),
        ("top", ctypes.c_int32),
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
    ]


class v4l2_fract(ctypes.Structure):
    _fields_ = [
        ("numerator", ctypes.c_uint32),
        ("denominator", ctypes.c_uint32),
    ]


class v4l2_capability(ctypes.Structure):
    _fields_ = [
        ("driver", ctypes.c_char * 16),
        ("card", ctypes.c_char * 32),
        ("bus_info", ctypes.c_char * 32),
        ("version", ctypes.c_uint32),
        ("capabilities", ctypes.c_uint32),
        ("device_caps", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 3),
    ]


# @formatter:off
V4L2_CAP_VIDEO_CAPTURE                  = 0x00000001
V4L2_CAP_VIDEO_OUTPUT                   = 0x00000002
V4L2_CAP_VIDEO_OVERLAY                  = 0x00000004
V4L2_CAP_VBI_CAPTURE                    = 0x00000010
V4L2_CAP_VBI_OUTPUT                     = 0x00000020
V4L2_CAP_SLICED_VBI_CAPTURE             = 0x00000040
V4L2_CAP_SLICED_VBI_OUTPUT              = 0x00000080
V4L2_CAP_RDS_CAPTURE                    = 0x00000100
V4L2_CAP_VIDEO_OUTPUT_OVERLAY           = 0x00000200
V4L2_CAP_HW_FREQ_SEEK                   = 0x00000400
V4L2_CAP_RDS_OUTPUT                     = 0x00000800

V4L2_CAP_VIDEO_CAPTURE_MPLANE           = 0x00001000
V4L2_CAP_VIDEO_OUTPUT_MPLANE            = 0x00002000
V4L2_CAP_VIDEO_M2M_MPLANE               = 0x00004000
V4L2_CAP_VIDEO_M2M                      = 0x00008000

V4L2_CAP_TUNER                          = 0x00010000
V4L2_CAP_AUDIO                          = 0x00020000
V4L2_CAP_RADIO                          = 0x00040000
V4L2_CAP_MODULATOR                      = 0x00080000

V4L2_CAP_SDR_CAPTURE                    = 0x00100000
V4L2_CAP_EXT_PIX_FORMAT                 = 0x00200000
V4L2_CAP_SDR_OUTPUT                     = 0x00400000
V4L2_CAP_META_CAPTURE                   = 0x00800000

V4L2_CAP_READWRITE                      = 0x01000000
V4L2_CAP_ASYNCIO                        = 0x02000000
V4L2_CAP_STREAMING                      = 0x04000000
V4L2_CAP_META_OUTPUT                    = 0x08000000

V4L2_CAP_TOUCH                          = 0x10000000

V4L2_CAP_DEVICE_CAPS                    = 0x80000000
# @formatter:on

class v4l2_pix_format__u(ctypes.Union):
    _fields_ = [
        ("ycbcr_enc", ctypes.c_uint32),
        ("hsv_enc", ctypes.c_uint32),
    ]


class v4l2_pix_format(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
        ("pixelformat", ctypes.c_uint32),
        ("field", ctypes.c_uint32),
        ("bytesperline", ctypes.c_uint32),
        ("sizeimage", ctypes.c_uint32),
        ("colorspace", ctypes.c_uint32),
        ("priv", ctypes.c_uint32),
        ("flags", ctypes.c_uint8),
        ("_u", v4l2_pix_format__u),
        ("quantization", ctypes.c_uint8),
        ("xfer_func", ctypes.c_uint8),
    ]


# @formatter:off
V4L2_PIX_FMT_RGB332                     = v4l2_fourcc('R', 'G', 'B', '1')
V4L2_PIX_FMT_RGB444                     = v4l2_fourcc('R', '4', '4', '4')
V4L2_PIX_FMT_ARGB444                    = v4l2_fourcc('A', 'R', '1', '2')
V4L2_PIX_FMT_XRGB444                    = v4l2_fourcc('X', 'R', '1', '2')
V4L2_PIX_FMT_RGBA444                    = v4l2_fourcc('R', 'A', '1', '2')
V4L2_PIX_FMT_RGBX444                    = v4l2_fourcc('R', 'X', '1', '2')
V4L2_PIX_FMT_ABGR444                    = v4l2_fourcc('A', 'B', '1', '2')
V4L2_PIX_FMT_XBGR444                    = v4l2_fourcc('X', 'B', '1', '2')

V4L2_PIX_FMT_BGRA444                    = v4l2_fourcc('G', 'A', '1', '2')
V4L2_PIX_FMT_BGRX444                    = v4l2_fourcc('B', 'X', '1', '2')
V4L2_PIX_FMT_RGB555                     = v4l2_fourcc('R', 'G', 'B', 'O')
V4L2_PIX_FMT_ARGB555                    = v4l2_fourcc('A', 'R', '1', '5')
V4L2_PIX_FMT_XRGB555                    = v4l2_fourcc('X', 'R', '1', '5')
V4L2_PIX_FMT_RGBA555                    = v4l2_fourcc('R', 'A', '1', '5')
V4L2_PIX_FMT_RGBX555                    = v4l2_fourcc('R', 'X', '1', '5')
V4L2_PIX_FMT_ABGR555                    = v4l2_fourcc('A', 'B', '1', '5')
V4L2_PIX_FMT_XBGR555                    = v4l2_fourcc('X', 'B', '1', '5')
V4L2_PIX_FMT_BGRA555                    = v4l2_fourcc('B', 'A', '1', '5')
V4L2_PIX_FMT_BGRX555                    = v4l2_fourcc('B', 'X', '1', '5')
V4L2_PIX_FMT_RGB565                     = v4l2_fourcc('R', 'G', 'B', 'P')
V4L2_PIX_FMT_RGB555X                    = v4l2_fourcc('R', 'G', 'B', 'Q')
V4L2_PIX_FMT_ARGB555X                   = v4l2_fourcc_be('A', 'R', '1', '5')
V4L2_PIX_FMT_XRGB555X                   = v4l2_fourcc_be('X', 'R', '1', '5')
V4L2_PIX_FMT_RGB565X                    = v4l2_fourcc('R', 'G', 'B', 'R')
V4L2_PIX_FMT_BGR666                     = v4l2_fourcc('B', 'G', 'R', 'H')
V4L2_PIX_FMT_BGR24                      = v4l2_fourcc('B', 'G', 'R', '3')
V4L2_PIX_FMT_RGB24                      = v4l2_fourcc('R', 'G', 'B', '3')
V4L2_PIX_FMT_BGR32                      = v4l2_fourcc('B', 'G', 'R', '4')
V4L2_PIX_FMT_ABGR32                     = v4l2_fourcc('A', 'R', '2', '4')
V4L2_PIX_FMT_XBGR32                     = v4l2_fourcc('X', 'R', '2', '4')
V4L2_PIX_FMT_BGRA32                     = v4l2_fourcc('R', 'A', '2', '4')
V4L2_PIX_FMT_BGRX32                     = v4l2_fourcc('R', 'X', '2', '4')
V4L2_PIX_FMT_RGB32                      = v4l2_fourcc('R', 'G', 'B', '4')
V4L2_PIX_FMT_RGBA32                     = v4l2_fourcc('A', 'B', '2', '4')
V4L2_PIX_FMT_RGBX32                     = v4l2_fourcc('X', 'B', '2', '4')
V4L2_PIX_FMT_ARGB32                     = v4l2_fourcc('B', 'A', '2', '4')
V4L2_PIX_FMT_XRGB32                     = v4l2_fourcc('B', 'X', '2', '4')

V4L2_PIX_FMT_GREY                       = v4l2_fourcc('G', 'R', 'E', 'Y')
V4L2_PIX_FMT_Y4                         = v4l2_fourcc('Y', '0', '4', ' ')
V4L2_PIX_FMT_Y6                         = v4l2_fourcc('Y', '0', '6', ' ')
V4L2_PIX_FMT_Y10                        = v4l2_fourcc('Y', '1', '0', ' ')
V4L2_PIX_FMT_Y12                        = v4l2_fourcc('Y', '1', '2', ' ')
V4L2_PIX_FMT_Y16                        = v4l2_fourcc('Y', '1', '6', ' ')
V4L2_PIX_FMT_Y16_BE                     = v4l2_fourcc_be('Y', '1', '6', ' ')

V4L2_PIX_FMT_Y10BPACK                   = v4l2_fourcc('Y', '1', '0', 'B')
V4L2_PIX_FMT_Y10P                       = v4l2_fourcc('Y', '1', '0', 'P')

V4L2_PIX_FMT_PAL8                       = v4l2_fourcc('P', 'A', 'L', '8')

V4L2_PIX_FMT_UV8                        = v4l2_fourcc('U', 'V', '8', ' ')

V4L2_PIX_FMT_YUYV                       = v4l2_fourcc('Y', 'U', 'Y', 'V')
V4L2_PIX_FMT_YYUV                       = v4l2_fourcc('Y', 'Y', 'U', 'V')
V4L2_PIX_FMT_YVYU                       = v4l2_fourcc('Y', 'V', 'Y', 'U')
V4L2_PIX_FMT_UYVY                       = v4l2_fourcc('U', 'Y', 'V', 'Y')
V4L2_PIX_FMT_VYUY                       = v4l2_fourcc('V', 'Y', 'U', 'Y')
V4L2_PIX_FMT_Y41P                       = v4l2_fourcc('Y', '4', '1', 'P')
V4L2_PIX_FMT_YUV444                     = v4l2_fourcc('Y', '4', '4', '4')
V4L2_PIX_FMT_YUV555                     = v4l2_fourcc('Y', 'U', 'V', 'O')
V4L2_PIX_FMT_YUV565                     = v4l2_fourcc('Y', 'U', 'V', 'P')
V4L2_PIX_FMT_YUV32                      = v4l2_fourcc('Y', 'U', 'V', '4')
V4L2_PIX_FMT_AYUV32                     = v4l2_fourcc('A', 'Y', 'U', 'V')
V4L2_PIX_FMT_XYUV32                     = v4l2_fourcc('X', 'Y', 'U', 'V')
V4L2_PIX_FMT_VUYA32                     = v4l2_fourcc('V', 'U', 'Y', 'A')
V4L2_PIX_FMT_VUYX32                     = v4l2_fourcc('V', 'U', 'Y', 'X')
V4L2_PIX_FMT_HI240                      = v4l2_fourcc('H', 'I', '2', '4')
V4L2_PIX_FMT_HM12                       = v4l2_fourcc('H', 'M', '1', '2')
V4L2_PIX_FMT_M420                       = v4l2_fourcc('M', '4', '2', '0')

V4L2_PIX_FMT_NV12                       = v4l2_fourcc('N', 'V', '1', '2')
V4L2_PIX_FMT_NV21                       = v4l2_fourcc('N', 'V', '2', '1')
V4L2_PIX_FMT_NV16                       = v4l2_fourcc('N', 'V', '1', '6')
V4L2_PIX_FMT_NV61                       = v4l2_fourcc('N', 'V', '6', '1')
V4L2_PIX_FMT_NV24                       = v4l2_fourcc('N', 'V', '2', '4')
V4L2_PIX_FMT_NV42                       = v4l2_fourcc('N', 'V', '4', '2')

V4L2_PIX_FMT_NV12M                      = v4l2_fourcc('N', 'M', '1', '2')
V4L2_PIX_FMT_NV21M                      = v4l2_fourcc('N', 'M', '2', '1')
V4L2_PIX_FMT_NV16M                      = v4l2_fourcc('N', 'M', '1', '6')
V4L2_PIX_FMT_NV61M                      = v4l2_fourcc('N', 'M', '6', '1')
V4L2_PIX_FMT_NV12MT                     = v4l2_fourcc('T', 'M', '1', '2')
V4L2_PIX_FMT_NV12MT_16X16               = v4l2_fourcc('V', 'M', '1', '2')

V4L2_PIX_FMT_YUV410                     = v4l2_fourcc('Y', 'U', 'V', '9')
V4L2_PIX_FMT_YVU410                     = v4l2_fourcc('Y', 'V', 'U', '9')
V4L2_PIX_FMT_YUV411P                    = v4l2_fourcc('4', '1', '1', 'P')
V4L2_PIX_FMT_YUV420                     = v4l2_fourcc('Y', 'U', '1', '2')
V4L2_PIX_FMT_YVU420                     = v4l2_fourcc('Y', 'V', '1', '2')
V4L2_PIX_FMT_YUV422P                    = v4l2_fourcc('4', '2', '2', 'P')

V4L2_PIX_FMT_YUV420M                    = v4l2_fourcc('Y', 'M', '1', '2')
V4L2_PIX_FMT_YVU420M                    = v4l2_fourcc('Y', 'M', '2', '1')
V4L2_PIX_FMT_YUV422M                    = v4l2_fourcc('Y', 'M', '1', '6')
V4L2_PIX_FMT_YVU422M                    = v4l2_fourcc('Y', 'M', '6', '1')
V4L2_PIX_FMT_YUV444M                    = v4l2_fourcc('Y', 'M', '2', '4')
V4L2_PIX_FMT_YVU444M                    = v4l2_fourcc('Y', 'M', '4', '2')

V4L2_PIX_FMT_SBGGR8                     = v4l2_fourcc('B', 'A', '8', '1')
V4L2_PIX_FMT_SGBRG8                     = v4l2_fourcc('G', 'B', 'R', 'G')
V4L2_PIX_FMT_SGRBG8                     = v4l2_fourcc('G', 'R', 'B', 'G')
V4L2_PIX_FMT_SRGGB8                     = v4l2_fourcc('R', 'G', 'G', 'B')
V4L2_PIX_FMT_SBGGR10                    = v4l2_fourcc('B', 'G', '1', '0')
V4L2_PIX_FMT_SGBRG10                    = v4l2_fourcc('G', 'B', '1', '0')
V4L2_PIX_FMT_SGRBG10                    = v4l2_fourcc('B', 'A', '1', '0')
V4L2_PIX_FMT_SRGGB10                    = v4l2_fourcc('R', 'G', '1', '0')

V4L2_PIX_FMT_SBGGR10P                   = v4l2_fourcc('p', 'B', 'A', 'A')
V4L2_PIX_FMT_SGBRG10P                   = v4l2_fourcc('p', 'G', 'A', 'A')
V4L2_PIX_FMT_SGRBG10P                   = v4l2_fourcc('p', 'g', 'A', 'A')
V4L2_PIX_FMT_SRGGB10P                   = v4l2_fourcc('p', 'R', 'A', 'A')

V4L2_PIX_FMT_SBGGR10ALAW8               = v4l2_fourcc('a', 'B', 'A', '8')
V4L2_PIX_FMT_SGBRG10ALAW8               = v4l2_fourcc('a', 'G', 'A', '8')
V4L2_PIX_FMT_SGRBG10ALAW8               = v4l2_fourcc('a', 'g', 'A', '8')
V4L2_PIX_FMT_SRGGB10ALAW8               = v4l2_fourcc('a', 'R', 'A', '8')

V4L2_PIX_FMT_SBGGR10DPCM8               = v4l2_fourcc('b', 'B', 'A', '8')
V4L2_PIX_FMT_SGBRG10DPCM8               = v4l2_fourcc('b', 'G', 'A', '8')
V4L2_PIX_FMT_SGRBG10DPCM8               = v4l2_fourcc('B', 'D', '1', '0')
V4L2_PIX_FMT_SRGGB10DPCM8               = v4l2_fourcc('b', 'R', 'A', '8')
V4L2_PIX_FMT_SBGGR12                    = v4l2_fourcc('B', 'G', '1', '2')
V4L2_PIX_FMT_SGBRG12                    = v4l2_fourcc('G', 'B', '1', '2')
V4L2_PIX_FMT_SGRBG12                    = v4l2_fourcc('B', 'A', '1', '2')
V4L2_PIX_FMT_SRGGB12                    = v4l2_fourcc('R', 'G', '1', '2')

V4L2_PIX_FMT_SBGGR12P                   = v4l2_fourcc('p', 'B', 'C', 'C')
V4L2_PIX_FMT_SGBRG12P                   = v4l2_fourcc('p', 'G', 'C', 'C')
V4L2_PIX_FMT_SGRBG12P                   = v4l2_fourcc('p', 'g', 'C', 'C')
V4L2_PIX_FMT_SRGGB12P                   = v4l2_fourcc('p', 'R', 'C', 'C')

V4L2_PIX_FMT_SBGGR14P                   = v4l2_fourcc('p', 'B', 'E', 'E')
V4L2_PIX_FMT_SGBRG14P                   = v4l2_fourcc('p', 'G', 'E', 'E')
V4L2_PIX_FMT_SGRBG14P                   = v4l2_fourcc('p', 'g', 'E', 'E')
V4L2_PIX_FMT_SRGGB14P                   = v4l2_fourcc('p', 'R', 'E', 'E')
V4L2_PIX_FMT_SBGGR16                    = v4l2_fourcc('B', 'Y', 'R', '2')
V4L2_PIX_FMT_SGBRG16                    = v4l2_fourcc('G', 'B', '1', '6')
V4L2_PIX_FMT_SGRBG16                    = v4l2_fourcc('G', 'R', '1', '6')
V4L2_PIX_FMT_SRGGB16                    = v4l2_fourcc('R', 'G', '1', '6')

V4L2_PIX_FMT_HSV24                      = v4l2_fourcc('H', 'S', 'V', '3')
V4L2_PIX_FMT_HSV32                      = v4l2_fourcc('H', 'S', 'V', '4')

V4L2_PIX_FMT_MJPEG                      = v4l2_fourcc('M', 'J', 'P', 'G')
V4L2_PIX_FMT_JPEG                       = v4l2_fourcc('J', 'P', 'E', 'G')
V4L2_PIX_FMT_DV                         = v4l2_fourcc('d', 'v', 's', 'd')
V4L2_PIX_FMT_MPEG                       = v4l2_fourcc('M', 'P', 'E', 'G')
V4L2_PIX_FMT_H264                       = v4l2_fourcc('H', '2', '6', '4')
V4L2_PIX_FMT_H264_NO_SC                 = v4l2_fourcc('A', 'V', 'C', '1')
V4L2_PIX_FMT_H264_MVC                   = v4l2_fourcc('M', '2', '6', '4')
V4L2_PIX_FMT_H263                       = v4l2_fourcc('H', '2', '6', '3')
V4L2_PIX_FMT_MPEG1                      = v4l2_fourcc('M', 'P', 'G', '1')
V4L2_PIX_FMT_MPEG2                      = v4l2_fourcc('M', 'P', 'G', '2')
V4L2_PIX_FMT_MPEG2_SLICE                = v4l2_fourcc('M', 'G', '2', 'S')
V4L2_PIX_FMT_MPEG4                      = v4l2_fourcc('M', 'P', 'G', '4')
V4L2_PIX_FMT_XVID                       = v4l2_fourcc('X', 'V', 'I', 'D')
V4L2_PIX_FMT_VC1_ANNEX_G                = v4l2_fourcc('V', 'C', '1', 'G')
V4L2_PIX_FMT_VC1_ANNEX_L                = v4l2_fourcc('V', 'C', '1', 'L')
V4L2_PIX_FMT_VP8                        = v4l2_fourcc('V', 'P', '8', '0')
V4L2_PIX_FMT_VP9                        = v4l2_fourcc('V', 'P', '9', '0')
V4L2_PIX_FMT_HEVC                       = v4l2_fourcc('H', 'E', 'V', 'C')
V4L2_PIX_FMT_FWHT                       = v4l2_fourcc('F', 'W', 'H', 'T')
V4L2_PIX_FMT_FWHT_STATELESS             = v4l2_fourcc('S', 'F', 'W', 'H')

V4L2_PIX_FMT_CPIA1                      = v4l2_fourcc('C', 'P', 'I', 'A')
V4L2_PIX_FMT_WNVA                       = v4l2_fourcc('W', 'N', 'V', 'A')
V4L2_PIX_FMT_SN9C10X                    = v4l2_fourcc('S', '9', '1', '0')
V4L2_PIX_FMT_SN9C20X_I420               = v4l2_fourcc('S', '9', '2', '0')
V4L2_PIX_FMT_PWC1                       = v4l2_fourcc('P', 'W', 'C', '1')
V4L2_PIX_FMT_PWC2                       = v4l2_fourcc('P', 'W', 'C', '2')
V4L2_PIX_FMT_ET61X251                   = v4l2_fourcc('E', '6', '2', '5')
V4L2_PIX_FMT_SPCA501                    = v4l2_fourcc('S', '5', '0', '1')
V4L2_PIX_FMT_SPCA505                    = v4l2_fourcc('S', '5', '0', '5')
V4L2_PIX_FMT_SPCA508                    = v4l2_fourcc('S', '5', '0', '8')
V4L2_PIX_FMT_SPCA561                    = v4l2_fourcc('S', '5', '6', '1')
V4L2_PIX_FMT_PAC207                     = v4l2_fourcc('P', '2', '0', '7')
V4L2_PIX_FMT_MR97310A                   = v4l2_fourcc('M', '3', '1', '0')
V4L2_PIX_FMT_JL2005BCD                  = v4l2_fourcc('J', 'L', '2', '0')
V4L2_PIX_FMT_SN9C2028                   = v4l2_fourcc('S', 'O', 'N', 'X')
V4L2_PIX_FMT_SQ905C                     = v4l2_fourcc('9', '0', '5', 'C')
V4L2_PIX_FMT_PJPG                       = v4l2_fourcc('P', 'J', 'P', 'G')
V4L2_PIX_FMT_OV511                      = v4l2_fourcc('O', '5', '1', '1')
V4L2_PIX_FMT_OV518                      = v4l2_fourcc('O', '5', '1', '8')
V4L2_PIX_FMT_STV0680                    = v4l2_fourcc('S', '6', '8', '0')
V4L2_PIX_FMT_TM6000                     = v4l2_fourcc('T', 'M', '6', '0')
V4L2_PIX_FMT_CIT_YYVYUY                 = v4l2_fourcc('C', 'I', 'T', 'V')
V4L2_PIX_FMT_KONICA420                  = v4l2_fourcc('K', 'O', 'N', 'I')
V4L2_PIX_FMT_JPGL                       = v4l2_fourcc('J', 'P', 'G', 'L')
V4L2_PIX_FMT_SE401                      = v4l2_fourcc('S', '4', '0', '1')
V4L2_PIX_FMT_S5C_UYVY_JPG               = v4l2_fourcc('S', '5', 'C', 'I')
V4L2_PIX_FMT_Y8I                        = v4l2_fourcc('Y', '8', 'I', ' ')
V4L2_PIX_FMT_Y12I                       = v4l2_fourcc('Y', '1', '2', 'I')
V4L2_PIX_FMT_Z16                        = v4l2_fourcc('Z', '1', '6', ' ')
V4L2_PIX_FMT_MT21C                      = v4l2_fourcc('M', 'T', '2', '1')
V4L2_PIX_FMT_INZI                       = v4l2_fourcc('I', 'N', 'Z', 'I')
V4L2_PIX_FMT_SUNXI_TILED_NV12           = v4l2_fourcc('S', 'T', '1', '2')
V4L2_PIX_FMT_CNF4                       = v4l2_fourcc('C', 'N', 'F', '4')

V4L2_PIX_FMT_IPU3_SBGGR10               = v4l2_fourcc('i', 'p', '3', 'b')
V4L2_PIX_FMT_IPU3_SGBRG10               = v4l2_fourcc('i', 'p', '3', 'g')
V4L2_PIX_FMT_IPU3_SGRBG10               = v4l2_fourcc('i', 'p', '3', 'G')
V4L2_PIX_FMT_IPU3_SRGGB10               = v4l2_fourcc('i', 'p', '3', 'r')

V4L2_SDR_FMT_CU8                        = v4l2_fourcc('C', 'U', '0', '8')
V4L2_SDR_FMT_CU16LE                     = v4l2_fourcc('C', 'U', '1', '6')
V4L2_SDR_FMT_CS8                        = v4l2_fourcc('C', 'S', '0', '8')
V4L2_SDR_FMT_CS14LE                     = v4l2_fourcc('C', 'S', '1', '4')
V4L2_SDR_FMT_RU12LE                     = v4l2_fourcc('R', 'U', '1', '2')
V4L2_SDR_FMT_PCU16BE                    = v4l2_fourcc('P', 'C', '1', '6')
V4L2_SDR_FMT_PCU18BE                    = v4l2_fourcc('P', 'C', '1', '8')
V4L2_SDR_FMT_PCU20BE                    = v4l2_fourcc('P', 'C', '2', '0')

V4L2_TCH_FMT_DELTA_TD16                 = v4l2_fourcc('T', 'D', '1', '6')
V4L2_TCH_FMT_DELTA_TD08                 = v4l2_fourcc('T', 'D', '0', '8')
V4L2_TCH_FMT_TU16                       = v4l2_fourcc('T', 'U', '1', '6')
V4L2_TCH_FMT_TU08                       = v4l2_fourcc('T', 'U', '0', '8')

V4L2_META_FMT_VSP1_HGO                  = v4l2_fourcc('V', 'S', 'P', 'H')
V4L2_META_FMT_VSP1_HGT                  = v4l2_fourcc('V', 'S', 'P', 'T')
V4L2_META_FMT_UVC                       = v4l2_fourcc('U', 'V', 'C', 'H')
V4L2_META_FMT_D4XX                      = v4l2_fourcc('D', '4', 'X', 'X')

V4L2_PIX_FMT_PRIV_MAGIC                 = 0xfeedcafe

V4L2_PIX_FMT_FLAG_PREMUL_ALPHA          = 0x00000001
# @formatter:on


class v4l2_fmtdesc(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("description", ctypes.c_char * 32),
        ("pixelformat", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 4),
    ]


# @formatter:off
V4L2_FMT_FLAG_COMPRESSED                = 0x0001
V4L2_FMT_FLAG_EMULATED                  = 0x0002
V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM     = 0x0004
V4L2_FMT_FLAG_DYN_RESOLUTION            = 0x0008
# @formatter:on

# @formatter:off
V4L2_FRMSIZE_TYPE_DISCRETE              = 1
V4L2_FRMSIZE_TYPE_CONTINUOUS            = 2
V4L2_FRMSIZE_TYPE_STEPWISE              = 3
# @formatter:on


class v4l2_frmsize_discrete(ctypes.Structure):
    _fields_ = [
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
    ]


class v4l2_frmsize_stepwise(ctypes.Structure):
    _fields_ = [
        ("min_width", ctypes.c_uint32),
        ("max_width", ctypes.c_uint32),
        ("step_width", ctypes.c_uint32),
        ("min_height", ctypes.c_uint32),
        ("max_height", ctypes.c_uint32),
        ("step_height", ctypes.c_uint32),
    ]


class v4l2_frmsizeenum__u(ctypes.Union):
    _fields_ = [
        ("discrete", v4l2_frmsize_discrete),
        ("stepwise", v4l2_frmsize_stepwise),
    ]


class v4l2_frmsizeenum(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("pixel_format", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("_u", v4l2_frmsizeenum__u),
        ("reserved", ctypes.c_uint32 * 2),
    ]


# @formatter:off
V4L2_FRMIVAL_TYPE_DISCRETE              = 1
V4L2_FRMIVAL_TYPE_CONTINUOUS            = 2
V4L2_FRMIVAL_TYPE_STEPWISE              = 3
# @formatter:on


class v4l2_frmival_stepwise(ctypes.Structure):
    _fields_ = [
        ("min", v4l2_fract),
        ("max", v4l2_fract),
        ("step", v4l2_fract),
    ]


class v4l2_frmivalenum__u(ctypes.Union):
    _fields_ = [
        ("discrete", v4l2_fract),
        ("stepwise", v4l2_frmival_stepwise),
    ]


class v4l2_frmivalenum(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("pixel_format", ctypes.c_uint32),
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("_u", v4l2_frmivalenum__u),
        ("reserved", ctypes.c_uint32 * 2),
    ]


class v4l2_timecode(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("frames", ctypes.c_uint8),
        ("seconds", ctypes.c_uint8),
        ("minutes", ctypes.c_uint8),
        ("hours", ctypes.c_uint8),
        ("userbits", ctypes.c_uint8 * 4),
    ]


# @formatter:off
V4L2_TC_TYPE_24FPS                      = 1
V4L2_TC_TYPE_25FPS                      = 2
V4L2_TC_TYPE_30FPS                      = 3
V4L2_TC_TYPE_50FPS                      = 4
V4L2_TC_TYPE_60FPS                      = 5
# @formatter:on

# @formatter:off
V4L2_TC_FLAG_DROPFRAME                  = 0x0001
V4L2_TC_FLAG_COLORFRAME                 = 0x0002
V4L2_TC_USERBITS_field                  = 0x000C
V4L2_TC_USERBITS_USERDEFINED            = 0x0000
V4L2_TC_USERBITS_8BITCHARS              = 0x0008
# @formatter:on


class v4l2_jpegcompression(ctypes.Structure):
    _fields_ = [
        ("quality", ctypes.c_int),
        ("APPn", ctypes.c_int),
        ("APP_len", ctypes.c_int),
        ("APP_data", ctypes.c_char * 60),
        ("COM_len", ctypes.c_int),
        ("COM_data", ctypes.c_char * 60),
        ("jpeg_markers", ctypes.c_uint32),
    ]


# @formatter:off
V4L2_JPEG_MARKER_DHT                    = 1 << 3
V4L2_JPEG_MARKER_DQT                    = 1 << 4
V4L2_JPEG_MARKER_DRI                    = 1 << 5
V4L2_JPEG_MARKER_COM                    = 1 << 6
V4L2_JPEG_MARKER_APP                    = 1 << 7
# @formatter:on


class v4l2_requestbuffers(ctypes.Structure):
    _fields_ = [
        ("count", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("memory", ctypes.c_uint32),
        ("capabilities", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 1),
    ]


# @formatter:off
V4L2_BUF_CAP_SUPPORTS_MMAP              = 1 << 0
V4L2_BUF_CAP_SUPPORTS_USERPTR           = 1 << 1
V4L2_BUF_CAP_SUPPORTS_DMABUF            = 1 << 2
V4L2_BUF_CAP_SUPPORTS_REQUESTS          = 1 << 3
V4L2_BUF_CAP_SUPPORTS_ORPHANED_BUFS     = 1 << 4
# @formatter:on


class v4l2_plane_m(ctypes.Union):
    _fields_ = [
        ("mem_offset", ctypes.c_uint32),
        ("userptr", ctypes.c_long),
        ("fd", ctypes.c_int32),
    ]


class v4l2_plane(ctypes.Structure):
    _fields_ = [
        ("bytesused", ctypes.c_uint32),
        ("length", ctypes.c_uint32),
        ("m", v4l2_plane_m),
        ("data_offset", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 11),
    ]


class v4l2_buffer_m(ctypes.Union):
    _fields_ = [
        ("offset", ctypes.c_uint32),
        ("userptr", ctypes.c_ulong),
        ("planes", ctypes.POINTER(v4l2_plane)),
        ("fd", ctypes.c_int32),
    ]


class v4l2_buffer__u(ctypes.Union):
    _fields_ = [
        ("request_fd", ctypes.c_int32),
        ("reserved", ctypes.c_uint32),
    ]


class v4l2_buffer(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("bytesused", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("field", ctypes.c_uint32),
        ("timestamp", timeval),
        ("timecode", v4l2_timecode),
        ("sequence", ctypes.c_uint32),
        ("memory", ctypes.c_uint32),
        ("m", v4l2_buffer_m),
        ("length", ctypes.c_uint32),
        ("reserved2", ctypes.c_uint32),
        ("_u", v4l2_buffer__u),
    ]


def v4l2_timeval_to_ns(tv):
    return tv.tv_sec * 1000000000 + tv.tv_usec * 1000


# @formatter:off
V4L2_BUF_FLAG_MAPPED                    = 0x00000001
V4L2_BUF_FLAG_QUEUED                    = 0x00000002
V4L2_BUF_FLAG_DONE                      = 0x00000004
V4L2_BUF_FLAG_KEYFRAME                  = 0x00000008
V4L2_BUF_FLAG_PFRAME                    = 0x00000010
V4L2_BUF_FLAG_BFRAME                    = 0x00000020
V4L2_BUF_FLAG_ERROR                     = 0x00000040
V4L2_BUF_FLAG_IN_REQUEST                = 0x00000080
V4L2_BUF_FLAG_TIMECODE                  = 0x00000100
V4L2_BUF_FLAG_PREPARED                  = 0x00000400
V4L2_BUF_FLAG_NO_CACHE_INVALIDATE       = 0x00000800
V4L2_BUF_FLAG_NO_CACHE_CLEAN            = 0x00001000
V4L2_BUF_FLAG_TIMESTAMP_MASK            = 0x0000e000
V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN         = 0x00000000
V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC       = 0x00002000
V4L2_BUF_FLAG_TIMESTAMP_COPY            = 0x00004000
V4L2_BUF_FLAG_TSTAMP_SRC_MASK           = 0x00070000
V4L2_BUF_FLAG_TSTAMP_SRC_EOF            = 0x00000000
V4L2_BUF_FLAG_TSTAMP_SRC_SOE            = 0x00010000
V4L2_BUF_FLAG_LAST                      = 0x00100000
V4L2_BUF_FLAG_REQUEST_FD                = 0x00800000
# @formatter:on


class v4l2_exportbuffer(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("index", ctypes.c_uint32),
        ("plane", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("fd", ctypes.c_int32),
        ("reserved", ctypes.c_uint32 * 11),
    ]


class v4l2_framebuffer_fmt(ctypes.Structure):
    _fields_ = [
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
        ("pixelformat", ctypes.c_uint32),
        ("field", ctypes.c_uint32),
        ("bytesperline", ctypes.c_uint32),
        ("sizeimage", ctypes.c_uint32),
        ("colorspace", ctypes.c_uint32),
        ("priv", ctypes.c_uint32),
    ]


class v4l2_framebuffer(ctypes.Structure):
    _fields_ = [
        ("capability", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("base", ctypes.c_void_p),
        ("fmt", v4l2_framebuffer_fmt),
    ]


# @formatter:off
V4L2_FBUF_CAP_EXTERNOVERLAY             = 0x0001
V4L2_FBUF_CAP_CHROMAKEY                 = 0x0002
V4L2_FBUF_CAP_LIST_CLIPPING             = 0x0004
V4L2_FBUF_CAP_BITMAP_CLIPPING           = 0x0008
V4L2_FBUF_CAP_LOCAL_ALPHA               = 0x0010
V4L2_FBUF_CAP_GLOBAL_ALPHA              = 0x0020
V4L2_FBUF_CAP_LOCAL_INV_ALPHA           = 0x0040
V4L2_FBUF_CAP_SRC_CHROMAKEY             = 0x0080

V4L2_FBUF_FLAG_PRIMARY                  = 0x0001
V4L2_FBUF_FLAG_OVERLAY                  = 0x0002
V4L2_FBUF_FLAG_CHROMAKEY                = 0x0004
V4L2_FBUF_FLAG_LOCAL_ALPHA              = 0x0008
V4L2_FBUF_FLAG_GLOBAL_ALPHA             = 0x0010
V4L2_FBUF_FLAG_LOCAL_INV_ALPHA          = 0x0020
V4L2_FBUF_FLAG_SRC_CHROMAKEY            = 0x0040
# @formatter:on


class v4l2_clip(ctypes.Structure):
    pass


v4l2_clip._fields_ = [
    ("c", v4l2_rect),
    ("next", ctypes.POINTER(v4l2_clip)),
]


class v4l2_window(ctypes.Structure):
    _fields_ = [
        ("w", v4l2_rect),
        ("field", ctypes.c_uint32),
        ("chromakey", ctypes.c_uint32),
        ("clips", ctypes.POINTER(v4l2_clip)),
        ("clipcount", ctypes.c_uint32),
        ("bitmap", ctypes.c_void_p),
        ("global_alpha", ctypes.c_uint8),
    ]


class v4l2_captureparm(ctypes.Structure):
    _fields_ = [
        ("capability", ctypes.c_uint32),
        ("capturemode", ctypes.c_uint32),
        ("timeperframe", v4l2_fract),
        ("extendedmode", ctypes.c_uint32),
        ("readbuffers", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 4),
    ]


# @formatter:off
V4L2_MODE_HIGHQUALITY                   = 0x0001
V4L2_CAP_TIMEPERFRAME                   = 0x1000
# @formatter:on


class v4l2_outputparm(ctypes.Structure):
    _fields_ = [
        ("capability", ctypes.c_uint32),
        ("outputmode", ctypes.c_uint32),
        ("timeperframe", v4l2_fract),
        ("extendedmode", ctypes.c_uint32),
        ("writebuffers", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 4),
    ]


class v4l2_cropcap(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("bounds", v4l2_rect),
        ("defrect", v4l2_rect),
        ("pixelaspect", v4l2_fract),
    ]


class v4l2_crop(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("c", v4l2_rect),
    ]


v4l2_std_id = ctypes.c_uint64

# @formatter:off
V4L2_STD_PAL_B                          = 0x00000001
V4L2_STD_PAL_B1                         = 0x00000002
V4L2_STD_PAL_G                          = 0x00000004
V4L2_STD_PAL_H                          = 0x00000008
V4L2_STD_PAL_I                          = 0x00000010
V4L2_STD_PAL_D                          = 0x00000020
V4L2_STD_PAL_D1                         = 0x00000040
V4L2_STD_PAL_K                          = 0x00000080

V4L2_STD_PAL_M                          = 0x00000100
V4L2_STD_PAL_N                          = 0x00000200
V4L2_STD_PAL_Nc                         = 0x00000400
V4L2_STD_PAL_60                         = 0x00000800

V4L2_STD_NTSC_M                         = 0x00001000
V4L2_STD_NTSC_M_JP                      = 0x00002000
V4L2_STD_NTSC_443                       = 0x00004000
V4L2_STD_NTSC_M_KR                      = 0x00008000

V4L2_STD_SECAM_B                        = 0x00010000
V4L2_STD_SECAM_D                        = 0x00020000
V4L2_STD_SECAM_G                        = 0x00040000
V4L2_STD_SECAM_H                        = 0x00080000
V4L2_STD_SECAM_K                        = 0x00100000
V4L2_STD_SECAM_K1                       = 0x00200000
V4L2_STD_SECAM_L                        = 0x00400000
V4L2_STD_SECAM_LC                       = 0x00800000

V4L2_STD_ATSC_8_VSB                     = 0x01000000
V4L2_STD_ATSC_16_VSB                    = 0x02000000

V4L2_STD_NTSC                           = V4L2_STD_NTSC_M | \
                                          V4L2_STD_NTSC_M_JP | \
                                          V4L2_STD_NTSC_M_KR

V4L2_STD_SECAM_DK                       = V4L2_STD_SECAM_D | \
                                          V4L2_STD_SECAM_K | \
                                          V4L2_STD_SECAM_K1

V4L2_STD_SECAM                          = V4L2_STD_SECAM_B | \
                                          V4L2_STD_SECAM_G | \
                                          V4L2_STD_SECAM_H | \
                                          V4L2_STD_SECAM_DK | \
                                          V4L2_STD_SECAM_L | \
                                          V4L2_STD_SECAM_LC

V4L2_STD_PAL_BG                         = V4L2_STD_PAL_B | \
                                          V4L2_STD_PAL_B1 | \
                                          V4L2_STD_PAL_G

V4L2_STD_PAL_DK                         = V4L2_STD_PAL_D | \
                                          V4L2_STD_PAL_D1 | \
                                          V4L2_STD_PAL_K

V4L2_STD_PAL                            = V4L2_STD_PAL_BG | \
                                          V4L2_STD_PAL_DK | \
                                          V4L2_STD_PAL_H | \
                                          V4L2_STD_PAL_I

V4L2_STD_B                              = V4L2_STD_PAL_B | \
                                          V4L2_STD_PAL_B1 | \
                                          V4L2_STD_SECAM_B

V4L2_STD_G                              = V4L2_STD_PAL_G | \
                                          V4L2_STD_SECAM_G

V4L2_STD_H                              = V4L2_STD_PAL_H | \
                                          V4L2_STD_SECAM_H

V4L2_STD_L                              = V4L2_STD_SECAM_L | \
                                          V4L2_STD_SECAM_LC

V4L2_STD_GH                             = V4L2_STD_G | \
                                          V4L2_STD_H

V4L2_STD_DK                             = V4L2_STD_PAL_DK | \
                                          V4L2_STD_SECAM_DK

V4L2_STD_BG                             = V4L2_STD_B | \
                                          V4L2_STD_G

V4L2_STD_MN                             = V4L2_STD_PAL_M | \
                                          V4L2_STD_PAL_N | \
                                          V4L2_STD_PAL_Nc | \
                                          V4L2_STD_NTSC

V4L2_STD_MTS                            = V4L2_STD_NTSC_M | \
                                          V4L2_STD_PAL_M | \
                                          V4L2_STD_PAL_N | \
                                          V4L2_STD_PAL_Nc

V4L2_STD_525_60                         = V4L2_STD_PAL_M | \
                                          V4L2_STD_PAL_60 | \
                                          V4L2_STD_NTSC | \
                                          V4L2_STD_NTSC_443

V4L2_STD_625_50                         = V4L2_STD_PAL | \
                                          V4L2_STD_PAL_N | \
                                          V4L2_STD_PAL_Nc | \
                                          V4L2_STD_SECAM

V4L2_STD_ATSC                           = V4L2_STD_ATSC_8_VSB | \
                                          V4L2_STD_ATSC_16_VSB

V4L2_STD_UNKNOWN                        = 0
V4L2_STD_ALL                            = V4L2_STD_525_60 | \
                                          V4L2_STD_625_50
# @formatter:on


class v4l2_standard(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("id", v4l2_std_id),
        ("name", ctypes.c_char * 24),
        ("frameperiod", v4l2_fract),
        ("framelines", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 4),
    ]


class v4l2_bt_timings(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
        ("interlaced", ctypes.c_uint32),
        ("polarities", ctypes.c_uint32),
        ("pixelclock", ctypes.c_uint64),
        ("hfrontporch", ctypes.c_uint32),
        ("hsync", ctypes.c_uint32),
        ("hbackporch", ctypes.c_uint32),
        ("vfrontporch", ctypes.c_uint32),
        ("vsync", ctypes.c_uint32),
        ("vbackporch", ctypes.c_uint32),
        ("il_vfrontporch", ctypes.c_uint32),
        ("il_vsync", ctypes.c_uint32),
        ("il_vbackporch", ctypes.c_uint32),
        ("standards", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("picture_aspect", v4l2_fract),
        ("cea861_vic", ctypes.c_uint8),
        ("hdmi_vic", ctypes.c_uint8),
        ("reserved", ctypes.c_uint8 * 46),
    ]


# @formatter:off
V4L2_DV_PROGRESSIVE                     = 0
V4L2_DV_INTERLACED                      = 1

V4L2_DV_VSYNC_POS_POL                   = 0x00000001
V4L2_DV_HSYNC_POS_POL                   = 0x00000002

V4L2_DV_BT_STD_CEA861                   = 1 << 0
V4L2_DV_BT_STD_DMT                      = 1 << 1
V4L2_DV_BT_STD_CVT                      = 1 << 2
V4L2_DV_BT_STD_GTF                      = 1 << 3
V4L2_DV_BT_STD_SDI                      = 1 << 4

V4L2_DV_FL_REDUCED_BLANKING             = 1 << 0
V4L2_DV_FL_CAN_REDUCE_FPS               = 1 << 1
V4L2_DV_FL_REDUCED_FPS                  = 1 << 2
V4L2_DV_FL_HALF_LINE                    = 1 << 3
V4L2_DV_FL_IS_CE_VIDEO                  = 1 << 4
V4L2_DV_FL_FIRST_FIELD_EXTRA_LINE       = 1 << 5
V4L2_DV_FL_HAS_PICTURE_ASPECT           = 1 << 6
V4L2_DV_FL_HAS_CEA861_VIC               = 1 << 7
V4L2_DV_FL_HAS_HDMI_VIC                 = 1 << 8
V4L2_DV_FL_CAN_DETECT_REDUCED_FPS       = 1 << 9
# @formatter:on


def V4L2_DV_BT_BLANKING_WIDTH(bt):
    return bt.hfrontporch + bt.hsync + bt.hbackporch


def V4L2_DV_BT_FRAME_WIDTH(bt):
    return bt.width + V4L2_DV_BT_BLANKING_WIDTH(bt)


def V4L2_DV_BT_BLANKING_HEIGHT(bt):
    return \
        bt.vfrontporch + bt.vsync + bt.vbackporch + \
        bt.il_vfrontporch + bt.il_vsync + bt.il_vbackporch


def V4L2_DV_BT_FRAME_HEIGHT(bt):
    return bt.height + V4L2_DV_BT_BLANKING_HEIGHT(bt)


class v4l2_dv_timings__u(ctypes.Union):
    _fields_ = [
        ("bt", v4l2_bt_timings),
        ("reserved", ctypes.c_uint32 * 32),
    ]


class v4l2_dv_timings(ctypes.Structure):
    _pack_ = 1
    _anonymous_ = ("_u",)
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("_u", v4l2_dv_timings__u),
    ]


class v4l2_enum_dv_timings(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("pad", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 2),
        ("timings", v4l2_dv_timings),
    ]


class v4l2_bt_timings_cap(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("min_width", ctypes.c_uint32),
        ("max_width", ctypes.c_uint32),
        ("min_height", ctypes.c_uint32),
        ("max_height", ctypes.c_uint32),
        ("min_pixelclock", ctypes.c_uint64),
        ("max_pixelclock", ctypes.c_uint64),
        ("standards", ctypes.c_uint32),
        ("capabilities", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 16),
    ]


# @formatter:off
V4L2_DV_BT_CAP_INTERLACED               = 1 << 0
V4L2_DV_BT_CAP_PROGRESSIVE              = 1 << 1
V4L2_DV_BT_CAP_REDUCED_BLANKING         = 1 << 2
V4L2_DV_BT_CAP_CUSTOM                   = 1 << 3
# @formatter:on


class v4l2_dv_timings_cap__u(ctypes.Union):
    _fields_ = [
        ("bt", v4l2_bt_timings_cap),
        ("raw_data", ctypes.c_uint32 * 32),
    ]


class v4l2_dv_timings_cap(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("pad", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 2),
        ("_u", v4l2_dv_timings_cap__u),
    ]


class v4l2_selection(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("target", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("r", v4l2_rect),
        ("reserved", ctypes.c_uint32 * 9),
    ]


class v4l2_input(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("type", ctypes.c_uint32),
        ("audioset", ctypes.c_uint32),
        ("tuner", ctypes.c_uint32),
        ("std", v4l2_std_id),
        ("status", ctypes.c_uint32),
        ("capabilities", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 3),
    ]


# @formatter:off
V4L2_INPUT_TYPE_TUNER                   = 1
V4L2_INPUT_TYPE_CAMERA                  = 2
V4L2_INPUT_TYPE_TOUCH                   = 3

V4L2_IN_ST_NO_POWER                     = 0x00000001
V4L2_IN_ST_NO_SIGNAL                    = 0x00000002
V4L2_IN_ST_NO_COLOR                     = 0x00000004

V4L2_IN_ST_HFLIP                        = 0x00000010
V4L2_IN_ST_VFLIP                        = 0x00000020

V4L2_IN_ST_NO_H_LOCK                    = 0x00000100
V4L2_IN_ST_COLOR_KILL                   = 0x00000200
V4L2_IN_ST_NO_V_LOCK                    = 0x00000400
V4L2_IN_ST_NO_STD_LOCK                  = 0x00000800

V4L2_IN_ST_NO_SYNC                      = 0x00010000
V4L2_IN_ST_NO_EQU                       = 0x00020000
V4L2_IN_ST_NO_CARRIER                   = 0x00040000

V4L2_IN_ST_MACROVISION                  = 0x01000000
V4L2_IN_ST_NO_ACCESS                    = 0x02000000
V4L2_IN_ST_VTR                          = 0x04000000

V4L2_IN_CAP_DV_TIMINGS                  = 0x00000002
V4L2_IN_CAP_CUSTOM_TIMINGS              = V4L2_IN_CAP_DV_TIMINGS
V4L2_IN_CAP_STD                         = 0x00000004
V4L2_IN_CAP_NATIVE_SIZE                 = 0x00000008
# @formatter:on


class v4l2_output(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("type", ctypes.c_uint32),
        ("audioset", ctypes.c_uint32),
        ("modulator", ctypes.c_uint32),
        ("std", v4l2_std_id),
        ("capabilities", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 3),
    ]


# @formatter:off
V4L2_OUTPUT_TYPE_MODULATOR              = 1
V4L2_OUTPUT_TYPE_ANALOG                 = 2
V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY       = 3

V4L2_OUT_CAP_DV_TIMINGS                 = 0x00000002
V4L2_OUT_CAP_CUSTOM_TIMINGS             = V4L2_OUT_CAP_DV_TIMINGS
V4L2_OUT_CAP_STD                        = 0x00000004
V4L2_OUT_CAP_NATIVE_SIZE                = 0x00000008
# @formatter:on


class v4l2_control(ctypes.Structure):
    _fields_ = [
        ("id", ctypes.c_uint32),
        ("value", ctypes.c_int32),
    ]


class v4l2_ext_control__u(ctypes.Union):
    _fields_ = [
        ("value", ctypes.c_int32),
        ("value64", ctypes.c_int64),
        ("string", ctypes.c_char_p),
        ("p_u8", ctypes.POINTER(ctypes.c_uint8)),
        ("p_u16", ctypes.POINTER(ctypes.c_uint16)),
        ("p_u32", ctypes.POINTER(ctypes.c_uint32)),
        ("ptr", ctypes.c_void_p),
    ]


class v4l2_ext_control(ctypes.Structure):
    _pack_ = 1
    _anonymous_ = ("_u",)
    _fields_ = [
        ("id", ctypes.c_uint32),
        ("size", ctypes.c_uint32),
        ("reserved2", ctypes.c_uint32 * 1),
        ("_u", v4l2_ext_control__u)
    ]


class v4l2_ext_controls__u(ctypes.Union):
    _fields_ = [
        ("ctrl_class", ctypes.c_uint32),
        ("which", ctypes.c_uint32),
    ]


class v4l2_ext_controls(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("_u", v4l2_ext_controls__u),
        ("count", ctypes.c_uint32),
        ("error_idx", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 1),
        ("controls", ctypes.POINTER(v4l2_ext_control)),
    ]


# @formatter:off
V4L2_CTRL_ID_MASK                       = 0x0fffffff
V4L2_CTRL_MAX_DIMS                      = 4
V4L2_CTRL_WHICH_CUR_VAL                 = 0
V4L2_CTRL_WHICH_DEF_VAL                 = 0x0f000000
V4L2_CTRL_WHICH_REQUEST_VAL             = 0x0f010000
# @formatter:on


def V4L2_CTRL_ID2CLASS(id):
    return id & 0x0fff0000


def V4L2_CTRL_ID2WHICH(id):
    return id & 0x0fff0000


def V4L2_CTRL_DRIVER_PRIV(id):
    return (id & 0xffff) >= 0x1000


# @formatter:off
V4L2_CTRL_TYPE_INTEGER                  = 1
V4L2_CTRL_TYPE_BOOLEAN                  = 2
V4L2_CTRL_TYPE_MENU                     = 3
V4L2_CTRL_TYPE_BUTTON                   = 4
V4L2_CTRL_TYPE_INTEGER64                = 5
V4L2_CTRL_TYPE_CTRL_CLASS               = 6
V4L2_CTRL_TYPE_STRING                   = 7
V4L2_CTRL_TYPE_BITMASK                  = 8
V4L2_CTRL_TYPE_INTEGER_MENU             = 9

V4L2_CTRL_COMPOUND_TYPES                = 0x0100
V4L2_CTRL_TYPE_U8                       = 0x0100
V4L2_CTRL_TYPE_U16                      = 0x0101
V4L2_CTRL_TYPE_U32                      = 0x0102
# @formatter:on


class v4l2_queryctrl(ctypes.Structure):
    _fields_ = [
        ("id", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("minimum", ctypes.c_int32),
        ("maximum", ctypes.c_int32),
        ("step", ctypes.c_int32),
        ("default_value", ctypes.c_int32),
        ("flags", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 2),
    ]


class v4l2_query_ext_ctrl(ctypes.Structure):
    _fields_ = [
        ("id", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("minimum", ctypes.c_int64),
        ("maximum", ctypes.c_int64),
        ("step", ctypes.c_uint64),
        ("default_value", ctypes.c_int64),
        ("flags", ctypes.c_uint32),
        ("elem_size", ctypes.c_uint32),
        ("elems", ctypes.c_uint32),
        ("nr_of_dims", ctypes.c_uint32),
        ("dims", ctypes.c_uint32 * V4L2_CTRL_MAX_DIMS),
        ("reserved", ctypes.c_uint32 * 32),
    ]


class v4l2_querymenu__u(ctypes.Union):
    _fields_ = [
        ("name", ctypes.c_char * 32),
        ("value", ctypes.c_int64),
    ]


class v4l2_querymenu(ctypes.Structure):
    _pack_ = 1
    _anonymous_ = ("_u",)
    _fields_ = [
        ("id", ctypes.c_uint32),
        ("index", ctypes.c_uint32),
        ("_u", v4l2_querymenu__u),
        ("reserved", ctypes.c_uint32),
    ]


# @formatter:off
V4L2_CTRL_FLAG_DISABLED                 = 0x0001
V4L2_CTRL_FLAG_GRABBED                  = 0x0002
V4L2_CTRL_FLAG_READ_ONLY                = 0x0004
V4L2_CTRL_FLAG_UPDATE                   = 0x0008
V4L2_CTRL_FLAG_INACTIVE                 = 0x0010
V4L2_CTRL_FLAG_SLIDER                   = 0x0020
V4L2_CTRL_FLAG_WRITE_ONLY               = 0x0040
V4L2_CTRL_FLAG_VOLATILE                 = 0x0080
V4L2_CTRL_FLAG_HAS_PAYLOAD              = 0x0100
V4L2_CTRL_FLAG_EXECUTE_ON_WRITE         = 0x0200
V4L2_CTRL_FLAG_MODIFY_LAYOUT            = 0x0400

V4L2_CTRL_FLAG_NEXT_CTRL                = 0x80000000
V4L2_CTRL_FLAG_NEXT_COMPOUND            = 0x40000000

V4L2_CID_MAX_CTRLS                      = 1024
V4L2_CID_PRIVATE_BASE                   = 0x08000000
# @formatter:on


class v4l2_tuner(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("type", ctypes.c_uint32),
        ("capability", ctypes.c_uint32),
        ("rangelow", ctypes.c_uint32),
        ("rangehigh", ctypes.c_uint32),
        ("rxsubchans", ctypes.c_uint32),
        ("audmode", ctypes.c_uint32),
        ("signal", ctypes.c_int32),
        ("afc", ctypes.c_int32),
        ("reserved", ctypes.c_uint32 * 4),
    ]


class v4l2_modulator(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("capability", ctypes.c_uint32),
        ("rangelow", ctypes.c_uint32),
        ("rangehigh", ctypes.c_uint32),
        ("txsubchans", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 3),
    ]


# @formatter:off
V4L2_TUNER_CAP_LOW                      = 0x0001
V4L2_TUNER_CAP_NORM                     = 0x0002
V4L2_TUNER_CAP_HWSEEK_BOUNDED           = 0x0004
V4L2_TUNER_CAP_HWSEEK_WRAP              = 0x0008
V4L2_TUNER_CAP_STEREO                   = 0x0010
V4L2_TUNER_CAP_LANG2                    = 0x0020
V4L2_TUNER_CAP_SAP                      = 0x0020
V4L2_TUNER_CAP_LANG1                    = 0x0040
V4L2_TUNER_CAP_RDS                      = 0x0080
V4L2_TUNER_CAP_RDS_BLOCK_IO             = 0x0100
V4L2_TUNER_CAP_RDS_CONTROLS             = 0x0200
V4L2_TUNER_CAP_FREQ_BANDS               = 0x0400
V4L2_TUNER_CAP_HWSEEK_PROG_LIM          = 0x0800
V4L2_TUNER_CAP_1HZ                      = 0x1000

V4L2_TUNER_SUB_MONO                     = 0x0001
V4L2_TUNER_SUB_STEREO                   = 0x0002
V4L2_TUNER_SUB_LANG2                    = 0x0004
V4L2_TUNER_SUB_SAP                      = 0x0004
V4L2_TUNER_SUB_LANG1                    = 0x0008
V4L2_TUNER_SUB_RDS                      = 0x0010

V4L2_TUNER_MODE_MONO                    = 0x0000
V4L2_TUNER_MODE_STEREO                  = 0x0001
V4L2_TUNER_MODE_LANG2                   = 0x0002
V4L2_TUNER_MODE_SAP                     = 0x0002
V4L2_TUNER_MODE_LANG1                   = 0x0003
V4L2_TUNER_MODE_LANG1_LANG2             = 0x0004
# @formatter:on


class v4l2_frequency(ctypes.Structure):
    _fields_ = [
        ("tuner", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("frequency", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 8),
    ]


# @formatter:off
V4L2_BAND_MODULATION_VSB                = 1 << 1
V4L2_BAND_MODULATION_FM                 = 1 << 2
V4L2_BAND_MODULATION_AM                 = 1 << 3
# @formatter:on


class v4l2_frequency_band(ctypes.Structure):
    _fields_ = [
        ("tuner", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("index", ctypes.c_uint32),
        ("capability", ctypes.c_uint32),
        ("rangelow", ctypes.c_uint32),
        ("rangehigh", ctypes.c_uint32),
        ("modulation", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 9),
    ]


class v4l2_hw_freq_seek(ctypes.Structure):
    _fields_ = [
        ("tuner", ctypes.c_uint32),
        ("type", ctypes.c_uint32),
        ("seek_upward", ctypes.c_uint32),
        ("wrap_around", ctypes.c_uint32),
        ("spacing", ctypes.c_uint32),
        ("rangelow", ctypes.c_uint32),
        ("rangehigh", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 5),
    ]


class v4l2_rds_data(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("lsb", ctypes.c_uint8),
        ("msb", ctypes.c_uint8),
        ("block", ctypes.c_uint8),
    ]


# @formatter:off
V4L2_RDS_BLOCK_MSK                      = 0x7
V4L2_RDS_BLOCK_A                        = 0
V4L2_RDS_BLOCK_B                        = 1
V4L2_RDS_BLOCK_C                        = 2
V4L2_RDS_BLOCK_D                        = 3
V4L2_RDS_BLOCK_C_ALT                    = 4
V4L2_RDS_BLOCK_INVALID                  = 7

V4L2_RDS_BLOCK_CORRECTED                = 0x40
V4L2_RDS_BLOCK_ERROR                    = 0x80
# @formatter:on


class v4l2_audio(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("capability", ctypes.c_uint32),
        ("mode", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 2),
    ]


# @formatter:off
V4L2_AUDCAP_STEREO                      = 0x00001
V4L2_AUDCAP_AVL                         = 0x00002
V4L2_AUDMODE_AVL                        = 0x00001
# @formatter:on


class v4l2_audioout(ctypes.Structure):
    _fields_ = [
        ("index", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
        ("capability", ctypes.c_uint32),
        ("mode", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 2),
    ]


# @formatter:off
V4L2_ENC_IDX_FRAME_I                    = 0
V4L2_ENC_IDX_FRAME_P                    = 1
V4L2_ENC_IDX_FRAME_B                    = 2
V4L2_ENC_IDX_FRAME_MASK                 = 0xf
# @formatter:on


class v4l2_enc_idx_entry(ctypes.Structure):
    _fields_ = [
        ("offset", ctypes.c_uint64),
        ("pts", ctypes.c_uint64),
        ("length", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 2),
    ]


# @formatter:off
V4L2_ENC_IDX_ENTRIES                    = 64
# @formatter:on


class v4l2_enc_idx(ctypes.Structure):
    _fields_ = [
        ("entries", ctypes.c_uint32),
        ("entries_cap", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 4),
        ("entry", v4l2_enc_idx_entry * V4L2_ENC_IDX_ENTRIES),
    ]


# @formatter:off
V4L2_ENC_CMD_START                      = 0
V4L2_ENC_CMD_STOP                       = 1
V4L2_ENC_CMD_PAUSE                      = 2
V4L2_ENC_CMD_RESUM                      = 3

V4L2_ENC_CMD_STOP_AT_GOP_END            = 1 << 0
# @formatter:on


class v4l2_encoder_cmd__u_raw(ctypes.Structure):
    _fields_ = [
        ("data", ctypes.c_uint32 * 8),
    ]


class v4l2_encoder_cmd__u(ctypes.Union):
    _fields_ = [
        ("raw", v4l2_encoder_cmd__u_raw),
    ]


class v4l2_encoder_cmd(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("cmd", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("_u", v4l2_encoder_cmd__u),
    ]


# @formatter:off
V4L2_DEC_CMD_START                      = 0
V4L2_DEC_CMD_STOP                       = 1
V4L2_DEC_CMD_PAUSE                      = 2
V4L2_DEC_CMD_RESUME                     = 3

V4L2_DEC_CMD_START_MUTE_AUDIO           = 1 << 0

V4L2_DEC_CMD_PAUSE_TO_BLACK             = 1 << 0

V4L2_DEC_CMD_STOP_TO_BLACK              = 1 << 0
V4L2_DEC_CMD_STOP_IMMEDIATELY           = 1 << 1

V4L2_DEC_START_FMT_NONE                 = 0
V4L2_DEC_START_FMT_GOP                  = 1
# @formatter:on


class v4l2_decoder_cmd__u_stop(ctypes.Structure):
    _fields_ = [
        ("pts", ctypes.c_uint64),
    ]


class v4l2_decoder_cmd__u_start(ctypes.Structure):
    _fields_ = [
        ("speed", ctypes.c_int32),
        ("format", ctypes.c_uint32),
    ]


class v4l2_decoder_cmd__u_raw(ctypes.Structure):
    _fields_ = [
        ("data", ctypes.c_uint32 * 8),
    ]


class v4l2_decoder_cmd__u(ctypes.Union):
    _fields_ = [
        ("stop", v4l2_decoder_cmd__u_stop),
        ("start", v4l2_decoder_cmd__u_start),
        ("raw", v4l2_decoder_cmd__u_raw),
    ]


class v4l2_decoder_cmd(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields_ = [
        ("cmd", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("_u", v4l2_decoder_cmd__u),
    ]


class v4l2_vbi_format(ctypes.Structure):
    _fields_ = [
        ("sampling_rate", ctypes.c_uint32),
        ("offset", ctypes.c_uint32),
        ("samples_per_line", ctypes.c_uint32),
        ("sample_format", ctypes.c_uint32),
        ("start", ctypes.c_int32 * 2),
        ("count", ctypes.c_uint32 * 2),
        ("flags", ctypes.c_uint32 * 2),
        ("reserved", ctypes.c_uint32 * 2),
    ]


# @formatter:off
V4L2_VBI_UNSYNC                         = 1 << 0
V4L2_VBI_INTERLACED                     = 1 << 1

V4L2_VBI_ITU_525_F1_START               = 1
V4L2_VBI_ITU_525_F2_START               = 264
V4L2_VBI_ITU_625_F1_START               = 1
V4L2_VBI_ITU_625_F2_START               = 314
# @formatter:on


class v4l2_sliced_vbi_format(ctypes.Structure):
    _fields_ = [
        ("service_set", ctypes.c_uint16),
        ("service_lines", ctypes.c_uint16 * 2 * 24),
        ("io_size", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 2),
    ]


# @formatter:off
V4L2_SLICED_TELETEXT_B                  = 0x0001
V4L2_SLICED_VPS                         = 0x0400
V4L2_SLICED_CAPTION_525                 = 0x1000
V4L2_SLICED_WSS_625                     = 0x4000
V4L2_SLICED_VBI_525                     = V4L2_SLICED_CAPTION_525
V4L2_SLICED_VBI_625                     = V4L2_SLICED_TELETEXT_B | \
                                          V4L2_SLICED_VPS | \
                                          V4L2_SLICED_WSS_625
# @formatter:on


class v4l2_sliced_vbi_cap(ctypes.Structure):
    _fields_ = [
        ("service_set", ctypes.c_uint16),
        ("service_lines", ctypes.c_uint16 * 2 * 24),
        ("type", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 3),
    ]


class v4l2_sliced_vbi_data(ctypes.Structure):
    _fields_ = [
        ("id", ctypes.c_uint32),
        ("field", ctypes.c_uint32),
        ("line", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32),
        ("data", ctypes.c_uint8 * 48),
    ]


# @formatter:off
V4L2_MPEG_VBI_IVTV_TELETEXT_B           = 1
V4L2_MPEG_VBI_IVTV_CAPTION_525          = 4
V4L2_MPEG_VBI_IVTV_WSS_625              = 5
V4L2_MPEG_VBI_IVTV_VPS                  = 7
# @formatter:on


class v4l2_mpeg_vbi_itv0_line(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("id", ctypes.c_uint8),
        ("data", ctypes.c_uint8 * 42),
    ]


class v4l2_mpeg_vbi_itv0(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("linemask", ctypes.c_uint32 * 2),  # __le32
        ("line", v4l2_mpeg_vbi_itv0_line * 35),
    ]


class v4l2_mpeg_vbi_ITV0(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("line", v4l2_mpeg_vbi_itv0_line * 36),
    ]


# @formatter:off
V4L2_MPEG_VBI_IVTV_MAGIC0               = "itv0"
V4L2_MPEG_VBI_IVTV_MAGIC1               = "ITV0"
# @formatter:on


class v4l2_mpeg_vbi_fmt_ivtv__u(ctypes.Union):
    _fields_ = [
        ("itv0", v4l2_mpeg_vbi_itv0),
        ("ITV0", v4l2_mpeg_vbi_ITV0),
    ]


class v4l2_mpeg_vbi_fmt_ivtv(ctypes.Structure):
    _pack_ = 1
    _anonymous_ = ("_u",)
    _fields_ = [
        ("magic", ctypes.c_uint8 * 4),
        ("_u", v4l2_mpeg_vbi_fmt_ivtv__u)
    ]


class v4l2_plane_pix_format(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("sizeimage", ctypes.c_uint32),
        ("byteperline", ctypes.c_uint32),
        ("reserved", ctypes.c_uint16 * 6),
    ]


class v4l2_pix_format_mplane__u(ctypes.Union):
    _fields_ = [
        ("ycbcr_enc", ctypes.c_uint8),
        ("hsv_enc", ctypes.c_uint8),
    ]


class v4l2_pix_format_mplane(ctypes.Structure):
    _pack_ = 1
    _anonymous_ = ("_u",)
    _fields_ = [
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
        ("pixelformat", ctypes.c_uint32),
        ("field", ctypes.c_uint32),
        ("colorspace", ctypes.c_uint32),
        ("plane_fmt", v4l2_plane_pix_format * VIDEO_MAX_PLANES),
        ("num_planes", ctypes.c_uint8),
        ("flags;", ctypes.c_uint8),
        ("_u", v4l2_pix_format_mplane__u),
        ("quantization", ctypes.c_uint8),
        ("xfer_func", ctypes.c_uint8),
        ("reserved", ctypes.c_uint8 * 7),
    ]


class v4l2_sdr_format(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("pixelformat", ctypes.c_uint32),
        ("buffersize", ctypes.c_uint32),
        ("reserved", ctypes.c_uint8 * 24),
    ]


class v4l2_meta_format(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("dataformat", ctypes.c_uint32),
        ("buffersize", ctypes.c_uint32),
    ]


class v4l2_format_fmt(ctypes.Union):
    _fields_ = [
        ("pix", v4l2_pix_format),
        ("pix_mp", v4l2_pix_format_mplane),
        ("win", v4l2_window),
        ("vbi", v4l2_vbi_format),
        ("sliced", v4l2_sliced_vbi_format),
        ("sdr", v4l2_sdr_format),
        ("meta", v4l2_meta_format),
        ("raw_data", ctypes.c_uint8 * 200)
    ]


class v4l2_format(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("fmt", v4l2_format_fmt)
    ]


class v4l2_streamparm_parm(ctypes.Union):
    _fields_ = [
        ("capture", v4l2_captureparm),
        ("output", v4l2_outputparm),
        ("raw_data", ctypes.c_uint8 * 200),
    ]


class v4l2_streamparm(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("parm", v4l2_streamparm_parm)
    ]


# @formatter:off
V4L2_EVENT_ALL                          = 0
V4L2_EVENT_VSYNC                        = 1
V4L2_EVENT_EOS                          = 2
V4L2_EVENT_CTRL                         = 3
V4L2_EVENT_FRAME_SYNC                   = 4
V4L2_EVENT_SOURCE_CHANGE                = 5
V4L2_EVENT_MOTION_DET                   = 6
V4L2_EVENT_PRIVATE_START                = 0x08000000
# @formatter:on


class v4l2_event_vsync(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("field", ctypes.c_uint8),
    ]


# @formatter:off
V4L2_EVENT_CTRL_CH_VALUE                = 1 << 0
V4L2_EVENT_CTRL_CH_FLAGS                = 1 << 1
V4L2_EVENT_CTRL_CH_RANGE                = 1 << 2
# @formatter:on


class v4l2_event_ctrl__u(ctypes.Union):
    _fields_ = [
        ("value", ctypes.c_int32),
        ("value64", ctypes.c_int64),
    ]


class v4l2_event_ctrl(ctypes.Structure):
    _anonymous_ = ("_u",)
    _fields = [
        ("changes", ctypes.c_uint32),
        ("typec", ctypes.c_uint32),
        ("_u", v4l2_event_ctrl__u),
        ("flags", ctypes.c_uint32),
        ("minimum", ctypes.c_int32),
        ("maximum", ctypes.c_int32),
        ("step", ctypes.c_int32),
        ("default_value", ctypes.c_int32),
    ]


class v4l2_event_frame_sync(ctypes.Structure):
    _fields_ = [
        ("frame_sequence", ctypes.c_uint32),
    ]


# @formatter:off
V4L2_EVENT_SRC_CH_RESOLUTION            = 1 << 0
# @formatter:on


class v4l2_event_src_change(ctypes.Structure):
    _fields_ = [
        ("changes", ctypes.c_uint32),
    ]


# @formatter:off
V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ         = 1 << 0
# @formatter:on


class v4l2_event_motion_det(ctypes.Structure):
    _fields_ = [
        ("flags", ctypes.c_uint32),
        ("frame_sequence", ctypes.c_uint32),
        ("region_mask", ctypes.c_uint32),
    ]


class v4l2_event_u(ctypes.Union):
    _fields_ = [
        ("vsync", v4l2_event_vsync),
        ("ctrl", v4l2_event_ctrl),
        ("frame_sync", v4l2_event_frame_sync),
        ("src_change", v4l2_event_src_change),
        ("motion_det", v4l2_event_motion_det),
        ("data", ctypes.c_uint8 * 64),
    ]


class v4l2_event(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("u", v4l2_event_u),
        ("pending", ctypes.c_uint32),
        ("sequence", ctypes.c_uint32),
        ("timestamp", timespec),
        ("id", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 8),
    ]


# @formatter:off
V4L2_EVENT_SUB_FL_SEND_INITIAL          = 1 << 0
V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK        = 1 << 1
# @formatter:on


class v4l2_event_subscription(ctypes.Structure):
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("id", ctypes.c_uint32),
        ("flags", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 5),
    ]


# @formatter:off
V4L2_CHIP_MATCH_BRIDGE                  = 0
V4L2_CHIP_MATCH_SUBDEV                  = 4

V4L2_CHIP_MATCH_HOST                    = V4L2_CHIP_MATCH_BRIDGE
V4L2_CHIP_MATCH_I2C_DRIVER              = 1
V4L2_CHIP_MATCH_I2C_ADDR                = 2
V4L2_CHIP_MATCH_AC97                    = 3
# @formatter:on


class v4l2_dbg_match__u(ctypes.Union):
    _fields_ = [
        ("addr", ctypes.c_uint32),
        ("name", ctypes.c_char * 32),
    ]


class v4l2_dbg_match(ctypes.Structure):
    _pack_ = 1
    _anonymous_ = ("_u",)
    _fields_ = [
        ("type", ctypes.c_uint32),
        ("_u", v4l2_dbg_match__u),
    ]


class v4l2_dbg_register(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("match", v4l2_dbg_match),
        ("size", ctypes.c_uint32),
        ("reg", ctypes.c_uint64),
        ("val", ctypes.c_uint64),
    ]


# @formatter:off
V4L2_CHIP_FL_READABLE                   = 1 << 0
V4L2_CHIP_FL_WRITABLE                   = 1 << 1
# @formatter:on


class v4l2_dbg_chip_info(ctypes.Structure):
    _pack_ = 1
    _fields_ = [
        ("match", v4l2_dbg_match),
        ("name", ctypes.c_char * 32),
        ("flags", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 32),
    ]


class v4l2_create_buffers(ctypes.Structure):
    _pack = 1
    _fields = [
        ("index", ctypes.c_uint32),
        ("count", ctypes.c_uint32),
        ("memory", ctypes.c_uint32),
        ("format", v4l2_format),
        ("capabilities", ctypes.c_uint32),
        ("reserved", ctypes.c_uint32 * 7),
    ]


# @formatter:off
VIDIOC_QUERYCAP                         =  _IOR('V',  0, v4l2_capability)
VIDIOC_ENUM_FMT                         = _IOWR('V',  2, v4l2_fmtdesc)
VIDIOC_G_FMT                            = _IOWR('V',  4, v4l2_format)
VIDIOC_S_FMT                            = _IOWR('V',  5, v4l2_format)
VIDIOC_REQBUFS                          = _IOWR('V',  8, v4l2_requestbuffers)
VIDIOC_QUERYBUF                         = _IOWR('V',  9, v4l2_buffer)
VIDIOC_G_FBUF                           =  _IOR('V', 10, v4l2_framebuffer)
VIDIOC_S_FBUF                           =  _IOW('V', 11, v4l2_framebuffer)
VIDIOC_OVERLAY                          =  _IOW('V', 14, ctypes.c_int)
VIDIOC_QBUF                             = _IOWR('V', 15, v4l2_buffer)
VIDIOC_EXPBUF                           = _IOWR('V', 16, v4l2_exportbuffer)
VIDIOC_DQBUF                            = _IOWR('V', 17, v4l2_buffer)
VIDIOC_STREAMON                         =  _IOW('V', 18, ctypes.c_int)
VIDIOC_STREAMOFF                        =  _IOW('V', 19, ctypes.c_int)
VIDIOC_G_PARM                           = _IOWR('V', 21, v4l2_streamparm)
VIDIOC_S_PARM                           = _IOWR('V', 22, v4l2_streamparm)
VIDIOC_G_STD                            =  _IOR('V', 23, v4l2_std_id)
VIDIOC_S_STD                            =  _IOW('V', 24, v4l2_std_id)
VIDIOC_ENUMSTD                          = _IOWR('V', 25, v4l2_standard)
VIDIOC_ENUMINPUT                        = _IOWR('V', 26, v4l2_input)
VIDIOC_G_CTRL                           = _IOWR('V', 27, v4l2_control)
VIDIOC_S_CTRL                           = _IOWR('V', 28, v4l2_control)
VIDIOC_G_TUNER                          = _IOWR('V', 29, v4l2_tuner)
VIDIOC_S_TUNER                          =  _IOW('V', 30, v4l2_tuner)
VIDIOC_G_AUDIO                          =  _IOR('V', 33, v4l2_audio)
VIDIOC_S_AUDIO                          =  _IOW('V', 34, v4l2_audio)
VIDIOC_QUERYCTRL                        = _IOWR('V', 36, v4l2_queryctrl)
VIDIOC_QUERYMENU                        = _IOWR('V', 37, v4l2_querymenu)
VIDIOC_G_INPUT                          =  _IOR('V', 38, ctypes.c_int)
VIDIOC_S_INPUT                          = _IOWR('V', 39, ctypes.c_int)
VIDIOC_G_EDID                           = _IOWR('V', 40, v4l2_edid)
VIDIOC_S_EDID                           = _IOWR('V', 41, v4l2_edid)
VIDIOC_G_OUTPUT                         =  _IOR('V', 46, ctypes.c_int)
VIDIOC_S_OUTPUT                         = _IOWR('V', 47, ctypes.c_int)
VIDIOC_ENUMOUTPUT                       = _IOWR('V', 48, v4l2_output)
VIDIOC_G_AUDOUT                         =  _IOR('V', 49, v4l2_audioout)
VIDIOC_S_AUDOUT                         =  _IOW('V', 50, v4l2_audioout)
VIDIOC_G_MODULATOR                      = _IOWR('V', 54, v4l2_modulator)
VIDIOC_S_MODULATOR                      =  _IOW('V', 55, v4l2_modulator)
VIDIOC_G_FREQUENCY                      = _IOWR('V', 56, v4l2_frequency)
VIDIOC_S_FREQUENCY                      =  _IOW('V', 57, v4l2_frequency)
VIDIOC_CROPCAP                          = _IOWR('V', 58, v4l2_cropcap)
VIDIOC_G_CROP                           = _IOWR('V', 59, v4l2_crop)
VIDIOC_S_CROP                           =  _IOW('V', 60, v4l2_crop)
VIDIOC_G_JPEGCOMP                       =  _IOR('V', 61, v4l2_jpegcompression)
VIDIOC_S_JPEGCOMP                       =  _IOW('V', 62, v4l2_jpegcompression)
VIDIOC_QUERYSTD                         =  _IOR('V', 63, v4l2_std_id)
VIDIOC_TRY_FMT                          = _IOWR('V', 64, v4l2_format)
VIDIOC_ENUMAUDIO                        = _IOWR('V', 65, v4l2_audio)
VIDIOC_ENUMAUDOUT                       = _IOWR('V', 66, v4l2_audioout)
VIDIOC_G_PRIORITY                       =  _IOR('V', 67, ctypes.c_uint32)
VIDIOC_S_PRIORITY                       =  _IOW('V', 68, ctypes.c_uint32)
VIDIOC_G_SLICED_VBI_CAP                 = _IOWR('V', 69, v4l2_sliced_vbi_cap)
VIDIOC_LOG_STATUS                       =   _IO('V', 70)
VIDIOC_G_EXT_CTRLS                      = _IOWR('V', 71, v4l2_ext_controls)
VIDIOC_S_EXT_CTRLS                      = _IOWR('V', 72, v4l2_ext_controls)
VIDIOC_TRY_EXT_CTRLS                    = _IOWR('V', 73, v4l2_ext_controls)
VIDIOC_ENUM_FRAMESIZES                  = _IOWR('V', 74, v4l2_frmsizeenum)
VIDIOC_ENUM_FRAMEINTERVALS              = _IOWR('V', 75, v4l2_frmivalenum)
VIDIOC_G_ENC_INDEX                      =  _IOR('V', 76, v4l2_enc_idx)
VIDIOC_ENCODER_CMD                      = _IOWR('V', 77, v4l2_encoder_cmd)
VIDIOC_TRY_ENCODER_CMD                  = _IOWR('V', 78, v4l2_encoder_cmd)

VIDIOC_DBG_S_REGISTER                   =  _IOW('V', 79, v4l2_dbg_register)
VIDIOC_DBG_G_REGISTER                   = _IOWR('V', 80, v4l2_dbg_register)

VIDIOC_S_HW_FREQ_SEEK                   =  _IOW('V', 82, v4l2_hw_freq_seek)
VIDIOC_S_DV_TIMINGS                     = _IOWR('V', 87, v4l2_dv_timings)
VIDIOC_G_DV_TIMINGS                     = _IOWR('V', 88, v4l2_dv_timings)
VIDIOC_DQEVENT                          =  _IOR('V', 89, v4l2_event)
VIDIOC_SUBSCRIBE_EVENT                  =  _IOW('V', 90, v4l2_event_subscription)
VIDIOC_UNSUBSCRIBE_EVENT                =  _IOW('V', 91, v4l2_event_subscription)
VIDIOC_CREATE_BUFS                      = _IOWR('V', 92, v4l2_create_buffers)
VIDIOC_PREPARE_BUF                      = _IOWR('V', 93, v4l2_buffer)
VIDIOC_G_SELECTION                      = _IOWR('V', 94, v4l2_selection)
VIDIOC_S_SELECTION                      = _IOWR('V', 95, v4l2_selection)
VIDIOC_DECODER_CMD                      = _IOWR('V', 96, v4l2_decoder_cmd)
VIDIOC_TRY_DECODER_CMD                  = _IOWR('V', 97, v4l2_decoder_cmd)
VIDIOC_ENUM_DV_TIMINGS                  = _IOWR('V', 98, v4l2_enum_dv_timings)
VIDIOC_QUERY_DV_TIMINGS                 =  _IOR('V', 99, v4l2_dv_timings)
VIDIOC_DV_TIMINGS_CAP                   = _IOWR('V', 100, v4l2_dv_timings_cap)
VIDIOC_ENUM_FREQ_BANDS                  = _IOWR('V', 101, v4l2_frequency_band)

VIDIOC_DBG_G_CHIP_INFO                  = _IOWR('V', 102, v4l2_dbg_chip_info)

VIDIOC_QUERY_EXT_CTRL                   = _IOWR('V', 103, v4l2_query_ext_ctrl)

BASE_VIDIOC_PRIVATE                     = 192
# @formatter:on
